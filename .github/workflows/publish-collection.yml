---
name: Publish Ansible Collection to Galaxy

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags (e.g., v1.0.0, v1.1.0)
  workflow_dispatch:  # Allow manual trigger
    inputs:
      version:
        description: 'Collection version to publish (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run (build only, do not publish)'
        required: false
        type: boolean
        default: false

jobs:
  build-and-publish:
    name: Build and Publish Collection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version detection
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core>=2.15.0
          pip install kubernetes>=12.0.0 openshift>=0.12.0 PyYAML>=5.4.1
      
      - name: Install required collections
        run: |
          ansible-galaxy collection install kubernetes.core:>=2.3.0
          ansible-galaxy collection install community.general:>=5.0.0
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Collection version: ${VERSION}"
      
      - name: Update galaxy.yml version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          sed -i "s/^version:.*/version: ${VERSION}/" collection/galaxy.yml
          echo "Updated galaxy.yml to version ${VERSION}"
          grep "^version:" collection/galaxy.yml
      
      - name: Validate collection structure
        run: |
          echo "Validating collection structure..."
          test -f collection/galaxy.yml || { echo "ERROR: galaxy.yml not found"; exit 1; }
          test -f collection/README.md || { echo "ERROR: README.md not found"; exit 1; }
          test -f collection/CHANGELOG.rst || { echo "ERROR: CHANGELOG.rst not found"; exit 1; }
          test -d collection/roles || { echo "ERROR: roles/ directory not found"; exit 1; }
          echo "Collection structure validation: PASSED"
      
      - name: Run yamllint on collection
        run: |
          pip install yamllint
          echo "Running yamllint on collection files..."
          yamllint collection/ || echo "WARNING: yamllint found issues (non-blocking)"
      
      - name: Build collection tarball
        id: build
        run: |
          echo "Building collection tarball..."
          ansible-galaxy collection build collection/ --output-path ./
          
          VERSION="${{ steps.version.outputs.version }}"
          TARBALL="tosin2013-validated_patterns_toolkit-${VERSION}.tar.gz"
          
          if [ ! -f "${TARBALL}" ]; then
            echo "ERROR: Collection tarball not created"
            exit 1
          fi
          
          echo "tarball=${TARBALL}" >> $GITHUB_OUTPUT
          echo "Collection tarball created: ${TARBALL}"
          ls -lh "${TARBALL}"
      
      - name: Verify collection tarball
        run: |
          TARBALL="${{ steps.build.outputs.tarball }}"
          echo "Verifying collection tarball contents..."
          tar -tzf "${TARBALL}" | head -20
          
          echo "Checking for required files in tarball..."
          tar -tzf "${TARBALL}" | grep -q "MANIFEST.json" || { echo "ERROR: MANIFEST.json missing"; exit 1; }
          tar -tzf "${TARBALL}" | grep -q "FILES.json" || { echo "ERROR: FILES.json missing"; exit 1; }
          tar -tzf "${TARBALL}" | grep -q "README.md" || { echo "ERROR: README.md missing"; exit 1; }
          
          echo "Tarball verification: PASSED"
      
      - name: Test local installation
        run: |
          TARBALL="${{ steps.build.outputs.tarball }}"
          echo "Testing local installation..."
          ansible-galaxy collection install "${TARBALL}" --force
          
          echo "Verifying installation..."
          ansible-galaxy collection list tosin2013.validated_patterns_toolkit
          
          echo "Checking role accessibility..."
          test -d ~/.ansible/collections/ansible_collections/tosin2013/validated_patterns_toolkit/roles/prerequisites || \
            { echo "ERROR: Prerequisites role not found"; exit 1; }
          
          echo "Local installation test: PASSED"
      
      - name: Upload collection artifact
        uses: actions/upload-artifact@v4
        with:
          name: collection-tarball
          path: ${{ steps.build.outputs.tarball }}
          retention-days: 30
      
      - name: Publish to Ansible Galaxy
        if: |
          github.event_name == 'push' || 
          (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false')
        env:
          ANSIBLE_GALAXY_API_KEY: ${{ secrets.GALAXY_API_KEY }}
        run: |
          TARBALL="${{ steps.build.outputs.tarball }}"
          
          if [ -z "${ANSIBLE_GALAXY_API_KEY}" ]; then
            echo "ERROR: GALAXY_API_KEY secret not configured"
            echo "Please add your Ansible Galaxy API token to GitHub Secrets"
            exit 1
          fi
          
          echo "Publishing collection to Ansible Galaxy..."
          ansible-galaxy collection publish "${TARBALL}" --api-key="${ANSIBLE_GALAXY_API_KEY}"
          
          echo "Collection published successfully!"
          echo "View at: https://galaxy.ansible.com/tosin2013/validated_patterns_toolkit"
      
      - name: Verify Galaxy publication
        if: |
          github.event_name == 'push' || 
          (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false')
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "Waiting 30 seconds for Galaxy to process the collection..."
          sleep 30
          
          echo "Verifying collection is available on Galaxy..."
          ansible-galaxy collection install tosin2013.validated_patterns_toolkit:${VERSION} --force || \
            echo "WARNING: Collection not yet available on Galaxy (may take a few minutes)"
      
      - name: Create GitHub Release
        if: github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.build.outputs.tarball }}
          body: |
            ## Ansible Collection Release ${{ steps.version.outputs.version }}
            
            ### Installation
            
            ```bash
            ansible-galaxy collection install tosin2013.validated_patterns_toolkit:${{ steps.version.outputs.version }}
            ```
            
            ### Links
            
            - **Ansible Galaxy**: https://galaxy.ansible.com/tosin2013/validated_patterns_toolkit
            - **Documentation**: https://github.com/tosin2013/validated-patterns-ansible-toolkit/tree/main/docs
            - **CHANGELOG**: https://github.com/tosin2013/validated-patterns-ansible-toolkit/blob/main/collection/CHANGELOG.rst
            
            ### What's Included
            
            - 8 production-ready roles for Validated Patterns deployment
            - Comprehensive documentation and examples
            - Full GitOps integration with ArgoCD
            - Sealed Secrets management
            
            See [CHANGELOG.rst](https://github.com/tosin2013/validated-patterns-ansible-toolkit/blob/main/collection/CHANGELOG.rst) for detailed release notes.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Dry run summary
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true'
        run: |
          echo "========================================="
          echo "DRY RUN COMPLETE"
          echo "========================================="
          echo "Collection built successfully but NOT published"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Tarball: ${{ steps.build.outputs.tarball }}"
          echo ""
          echo "To publish, run workflow again with dry_run=false"
          echo "Or push a version tag: git tag v${{ steps.version.outputs.version }} && git push origin v${{ steps.version.outputs.version }}"
          echo "========================================="
      
      - name: Success summary
        if: |
          github.event_name == 'push' || 
          (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false')
        run: |
          echo "========================================="
          echo "COLLECTION PUBLISHED SUCCESSFULLY!"
          echo "========================================="
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Galaxy: https://galaxy.ansible.com/tosin2013/validated_patterns_toolkit"
          echo ""
          echo "Install with:"
          echo "  ansible-galaxy collection install tosin2013.validated_patterns_toolkit:${{ steps.version.outputs.version }}"
          echo "========================================="

