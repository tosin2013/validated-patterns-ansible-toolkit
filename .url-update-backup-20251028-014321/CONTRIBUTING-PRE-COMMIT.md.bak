# Pre-commit Hooks Setup Guide

This guide explains how to set up and use pre-commit hooks in the Validated Patterns Toolkit repository.

## What are Pre-commit Hooks?

Pre-commit hooks are automated checks that run before you commit code to Git. They help:
- **Prevent secrets** from being committed (API tokens, passwords, keys)
- **Enforce code quality** (YAML syntax, trailing whitespace, line endings)
- **Catch common mistakes** (merge conflicts, large files)
- **Maintain consistency** across the codebase

## Quick Start

### 1. Install Pre-commit

```bash
# Install pre-commit (if not already installed)
pip install pre-commit

# Verify installation
pre-commit --version
```

### 2. Install Hooks

```bash
# Navigate to repository root
cd /path/to/ansible-execution-environment

# Install pre-commit hooks
pre-commit install

# You should see:
# pre-commit installed at .git/hooks/pre-commit
```

### 3. Test Hooks

```bash
# Run hooks on all files (optional, but recommended)
pre-commit run --all-files

# This will check all files in the repository
# First run may take a few minutes to set up environments
```

## What Hooks Are Configured?

The repository uses the following hooks (configured in `.pre-commit-config.yaml`):

### Standard Hooks
1. **trailing-whitespace** - Removes trailing whitespace from files
2. **end-of-file-fixer** - Ensures files end with a newline
3. **check-yaml** - Validates YAML syntax (excludes Helm templates)
4. **check-added-large-files** - Prevents committing files > 1MB
5. **check-merge-conflict** - Detects merge conflict markers
6. **check-case-conflict** - Detects case-insensitive filename conflicts
7. **mixed-line-ending** - Ensures consistent line endings (LF)

### Security Hooks
8. **gitleaks** - Detects secrets and sensitive information
   - Custom rules for Validated Patterns tokens
   - Ansible Hub tokens, OpenShift tokens, Quay tokens
   - RHSM activation keys, Gitea passwords
   - See `.gitleaks.toml` for full configuration

### Code Quality Hooks
9. **yamllint** - Validates YAML files against style rules
   - 120 character line length (warning)
   - 2-space indentation
   - See `.yamllint` for full configuration

## How Hooks Work

### Automatic Checks on Commit

When you run `git commit`, pre-commit hooks run automatically:

```bash
$ git commit -m "feat: add new feature"

Trim trailing whitespace.................................................Passed
Fix end of files.........................................................Passed
Check YAML syntax........................................................Passed
Check for large files....................................................Passed
Check for merge conflicts................................................Passed
Check for case conflicts.................................................Passed
Check for mixed line endings.............................................Passed
Detect secrets with gitleaks.............................................Passed
Lint YAML files..........................................................Passed

[main abc1234] feat: add new feature
 1 file changed, 10 insertions(+)
```

### If a Hook Fails

If a hook detects an issue, the commit is blocked:

```bash
$ git commit -m "feat: add configuration"

Detect secrets with gitleaks.............................................Failed
- hook id: gitleaks
- exit code: 1

Finding:     token: j0sBFggYvrMlHdp0LTtn1VD0so6OlsZI
Secret:      j0sBFggYvrMlHdp0LTtn1VD0so6OlsZI
RuleID:      validated-patterns-token
File:        values-global.yaml
Line:        19

❌ Secret detected! Please remove the secret and try again.
```

**What to do:**
1. Remove the secret from the file
2. Use environment variables or templates instead
3. Stage the fixed file: `git add values-global.yaml`
4. Try committing again: `git commit -m "feat: add configuration"`

## Common Scenarios

### Scenario 1: Auto-fixable Issues

Some hooks automatically fix issues (trailing whitespace, end-of-file):

```bash
$ git commit -m "docs: update README"

Trim trailing whitespace.................................................Failed
- hook id: trailing-whitespace
- exit code: 1
- files were modified by this hook

Fixing README.md

# The hook fixed the file automatically
# Just stage the changes and commit again
$ git add README.md
$ git commit -m "docs: update README"
```

### Scenario 2: YAML Syntax Errors

```bash
$ git commit -m "feat: add playbook"

Check YAML syntax........................................................Failed
- hook id: check-yaml
- exit code: 1

while parsing a block mapping
  in "ansible/playbooks/deploy.yml", line 10, column 3
did not find expected key
  in "ansible/playbooks/deploy.yml", line 15, column 5

# Fix the YAML syntax error in the file
# Then stage and commit again
```

### Scenario 3: Legitimate Secrets in Templates

Template files and documentation are allowlisted:

```bash
# These files are allowed to contain example secrets
values-secrets.yaml.template
tests/*.example
tests/*.sample
docs/**/*.md
README.md
```

If you need to add a new pattern to the allowlist, edit `.gitleaks.toml`:

```toml
[allowlist]
paths = [
  '''values-secrets\.yaml\.template''',
  '''tests/.*\.example''',
  '''your-new-pattern-here''',
]
```

## Skipping Hooks (Use Sparingly!)

In rare cases, you may need to skip hooks:

```bash
# Skip all hooks (NOT RECOMMENDED)
git commit --no-verify -m "emergency fix"

# Skip specific hook
SKIP=gitleaks git commit -m "commit message"
```

**⚠️ Warning**: Only skip hooks if you're absolutely sure it's safe. Skipping gitleaks can lead to secret leaks!

## Updating Hooks

Hooks are automatically updated when you pull changes to `.pre-commit-config.yaml`:

```bash
# Update to latest hook versions
pre-commit autoupdate

# Reinstall hooks after update
pre-commit install
```

## Troubleshooting

### Hooks Not Running

```bash
# Reinstall hooks
pre-commit uninstall
pre-commit install

# Verify installation
ls -la .git/hooks/pre-commit
```

### Hooks Taking Too Long

```bash
# Run only on changed files (default)
git commit -m "message"

# Skip slow hooks for quick commits
SKIP=yamllint git commit -m "message"
```

### False Positives in Gitleaks

If gitleaks incorrectly flags a file:

1. Check if it's a template or test file (should be allowlisted)
2. Add the file pattern to `.gitleaks.toml` allowlist
3. Use `gitleaks:allow` comment in the file (use sparingly):

```yaml
# gitleaks:allow
example_token: "this-is-just-an-example-not-real"
```

### Clean Up Hook Environments

```bash
# Remove cached hook environments
pre-commit clean

# Reinstall from scratch
pre-commit install --install-hooks
```

## CI/CD Integration

Pre-commit hooks also run in CI/CD pipelines:

```yaml
# .github/workflows/pre-commit.yml
name: Pre-commit Checks
on: [push, pull_request]
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: pre-commit/action@v3.0.0
```

## Best Practices

1. **Install hooks immediately** after cloning the repository
2. **Run hooks on all files** before creating a pull request
3. **Never skip gitleaks** unless absolutely necessary
4. **Fix issues immediately** rather than skipping hooks
5. **Keep hooks updated** with `pre-commit autoupdate`
6. **Use templates** for files that need example secrets
7. **Use environment variables** for real secrets

## Getting Help

If you encounter issues with pre-commit hooks:

1. Check this guide first
2. Review `.pre-commit-config.yaml` and `.gitleaks.toml`
3. Check [ADR-014](./adr/ADR-014-pre-commit-hooks-gitleaks.md) for detailed decisions
4. Open an issue on GitHub
5. Ask in the team chat

## References

- [Pre-commit Documentation](https://pre-commit.com/)
- [Gitleaks Documentation](https://github.com/gitleaks/gitleaks)
- [Yamllint Documentation](https://yamllint.readthedocs.io/)
- [ADR-014: Pre-commit Hooks and Gitleaks Integration](./adr/ADR-014-pre-commit-hooks-gitleaks.md)

---

**Last Updated:** 2025-10-28
**Maintained By:** @tosin2013

