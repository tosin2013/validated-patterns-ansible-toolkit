---
# Ansible Builder Execution Environment
# https://ansible.readthedocs.io/projects/builder/en/latest/definition/#version-3-sample-file

version: 3

build_arg_defaults:
  ANSIBLE_GALAXY_CLI_COLLECTION_OPTS: '--ignore-certs'

dependencies:
  ansible_core:
    package_pip: ansible-core==2.15.13
  ansible_runner:
    package_pip: ansible-runner==2.4.1
  galaxy: files/requirements.yml
  python: files/requirements.txt
  system: files/bindep.txt

images:
  base_image:
    name: 'registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9:latest'

options:
  package_manager_path: /usr/bin/microdnf

additional_build_files:
  # Ansible Galaxy - critical for ansible-galaxy to work
  - src: ansible.cfg
    dest: configs
  # Optional configs directory (ignored if empty). Place rhsm-activation.env here.
  - src: files/optional-configs
    dest: configs/optional
  # Override install-from-bindep to ignore openshift-clients when repos are unavailable
  - src: scripts/install-from-bindep
    dest: scripts
  - src: scripts/assemble
    dest: scripts
    # - src: files/krb5.conf  # (Optional) Windows Authentication - Kerberos
    #   dest: configs

additional_build_steps:
  prepend_base:
    - RUN whoami
    - RUN cat /etc/os-release
    - RUN echo PKGMGR = $PKGMGR, PYCMD = $PYCMD
    - RUN $PYCMD -m pip install --upgrade pip
    - COPY _build/configs/optional /_extras/optional

    # Optional: Install OpenShift CLI (oc/kubectl) via Red Hat repos using subscription-manager
    # Provide credentials via files/optional-configs/rhsm-activation.env with:
    #   RH_ORG=your_org
    #   RH_ACT_KEY=your_activation_key
    # This block is conditional and will be skipped if creds are not provided.
    - >
      RUN RH_ENV="/_extras/optional/rhsm-activation.env" ; \
          if [ -f "$RH_ENV" ]; then set -a; . "$RH_ENV"; set +a; fi ; \
          if [ -n "$RH_ORG" ] && [ -n "$RH_ACT_KEY" ]; then \
            echo "==> Enabling OpenShift client repo via RHSM" && \
            (command -v subscription-manager >/dev/null 2>&1 || $PKGMGR -y install subscription-manager || true) && \
            subscription-manager register --org="$RH_ORG" --activationkey="$RH_ACT_KEY" && \
            subscription-manager attach --auto || true && \
            ARCH=$(uname -m) && \
            (subscription-manager repos --enable="rhocp-4.15-for-rhel-9-${ARCH}-rpms" || \
             subscription-manager repos --enable="rhocp-4.14-for-rhel-9-${ARCH}-rpms" || true) && \
            ($PKGMGR -y install openshift-clients || true) ; \
          else \
            echo "==> Skipping OpenShift client repo enable (no RH_ORG/RH_ACT_KEY provided)" ; \
          fi

    # Optional: Install oc/kubectl from tarball (no RHSM required)
    # Provide files/optional-configs/oc-install.env with either:
    #   OC_VERSION=stable   # or v4.14.30, etc.
    #   # or provide a direct URL
    #   # OC_URL=https://mirror.openshift.com/pub/openshift-v4/clients/ocp/v4.14.30/openshift-client-linux.tar.gz
    - >
      RUN OC_ENV="/_extras/optional/oc-install.env" ; \
          if [ -f "$OC_ENV" ]; then set -a; . "$OC_ENV"; set +a; fi ; \
          if [ -n "$OC_URL" ] || [ -n "$OC_VERSION" ]; then \
            echo "==> Installing oc/kubectl from tarball" && \
            URL="${OC_URL:-https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${OC_VERSION}/openshift-client-linux.tar.gz}" && \
            ($PKGMGR -y install curl tar || true) && \
            curl -L -o /tmp/oc.tgz "$URL" && \
            tar -C /usr/local/bin -xzf /tmp/oc.tgz oc kubectl && \
            chmod +x /usr/local/bin/oc /usr/local/bin/kubectl && \
            rm -f /tmp/oc.tgz ; \
          else \
            echo "==> Skipping oc/kubectl install (no OC_URL/OC_VERSION)" ; \
          fi

    # (Optional) Install Red Hat OpenShift client tools by enabling repo (prepare with manual steps below)
    # https://access.redhat.com/solutions/6985157
    # https://docs.openshift.com/container-platform/4.13/cli_reference/openshift_cli/getting-started-cli.html#cli-installing-cli-rpm_cli-developer-commands
    # subscription-manager attach --pool=`subscription-manager list --available --matches '*OpenShift*' | grep "Pool ID" | awk '{print $3}'`
    # subscription-manager repos --list | grep rhocp-4.14
    # (not needed) subscription-manager repos --enable="rhocp-4.12-for-rhel-9-x86_64-rpms"
    # - ENV PKGMGR_OPTS "--nodocs --setopt install_weak_deps=0 --enablerepo=rhocp-4.14-for-rhel-9-aarch64-rpms"

    # (Optional) Install Microsoft azure-cli command line tool (needs dnf to install from url)
    # https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=dnf
    # - >
    #   RUN $PKGMGR install -y dnf &&
    #   rpm --import https://packages.microsoft.com/keys/microsoft.asc &&
    #   dnf -y install -y https://packages.microsoft.com/config/rhel/9.0/packages-microsoft-prod.rpm &&
    #   $PKGMGR -y install azure-cli

    # (Optional) Install HashiCorp Packer (/usr/bin/packer)
    # - >
    #   RUN curl https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo --output /etc/yum.repos.d/hashicorp.repo &&
    #   $PKGMGR -y install packer

    # (Optional) Install Red Hat open-scap command line tool to run security scans on target systems and generate reports
    # - RUN $PKGMGR -y install openscap-scanner
  prepend_galaxy:
    # Ansible Galaxy - critical for ansible-galaxy to work
    - COPY _build/configs/ansible.cfg /etc/ansible/ansible.cfg

    # (Optional) Windows Authentication - Kerberos
    # - COPY _build/configs/krb5.conf /etc/krb5.conf
  append_final:
    # Verify installed packages have compatible dependencies
    # Logged issue https://github.com/ansible/ansible-builder/issues/416
    - RUN pip3 check
    # Optional: clean RHSM registration and repo files if present
    - >
      RUN if command -v subscription-manager >/dev/null 2>&1; then \
            subscription-manager unregister || true && \
            subscription-manager clean || true && \
            rm -f /etc/yum.repos.d/redhat.repo && \
            rm -rf /etc/rhsm/* ; \
          fi
    # Clean up
    - >
      RUN $PKGMGR update -y &&
      $PKGMGR clean all &&
      rm -rf /var/cache/{dnf,yum} &&
      rm -rf /var/lib/dnf/history.* &&
      rm -rf /var/log/*
