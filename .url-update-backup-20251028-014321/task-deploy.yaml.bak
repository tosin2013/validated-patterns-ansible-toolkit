apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reference-app-deploy
  namespace: reference-app
spec:
  description: Deploy Quarkus reference application to Kubernetes

  params:
  - name: IMAGE
    type: string
    description: Container image to deploy
  - name: NAMESPACE
    type: string
    description: Kubernetes namespace for deployment
    default: reference-app
  - name: OVERLAY
    type: string
    description: Kustomize overlay (dev or prod)
    default: prod
  - name: KUBECTL_IMAGE
    type: string
    description: kubectl container image
    default: bitnami/kubectl:latest

  workspaces:
  - name: source
    description: Source code workspace

  steps:
  - name: create-namespace
    image: $(params.KUBECTL_IMAGE)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Creating namespace: $(params.NAMESPACE)"

      kubectl create namespace $(params.NAMESPACE) --dry-run=client -o yaml | kubectl apply -f -

      echo "Namespace ready!"

  - name: update-image
    image: $(params.KUBECTL_IMAGE)
    workingDir: $(workspaces.source.path)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Updating image in Kustomize overlay..."

      # Update image in kustomization.yaml
      OVERLAY_PATH="k8s/overlays/$(params.OVERLAY)"

      if [ ! -f "$OVERLAY_PATH/kustomization.yaml" ]; then
        echo "ERROR: Overlay not found at $OVERLAY_PATH"
        exit 1
      fi

      # Extract registry, namespace, name, and tag from image
      IMAGE="$(params.IMAGE)"

      echo "Deploying image: $IMAGE"

  - name: deploy-with-kustomize
    image: $(params.KUBECTL_IMAGE)
    workingDir: $(workspaces.source.path)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Deploying with Kustomize..."

      OVERLAY_PATH="k8s/overlays/$(params.OVERLAY)"
      NAMESPACE="$(params.NAMESPACE)"

      # Apply Kustomize overlay
      kubectl apply -k "$OVERLAY_PATH" -n "$NAMESPACE"

      echo "Deployment applied!"

  - name: wait-for-rollout
    image: $(params.KUBECTL_IMAGE)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Waiting for deployment rollout..."

      NAMESPACE="$(params.NAMESPACE)"
      DEPLOYMENT="reference-app"
      TIMEOUT=300

      # Wait for deployment to be ready
      kubectl rollout status deployment/$DEPLOYMENT \
        -n $NAMESPACE \
        --timeout=${TIMEOUT}s

      echo "Deployment rolled out successfully!"

  - name: verify-pods
    image: $(params.KUBECTL_IMAGE)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Verifying pods..."

      NAMESPACE="$(params.NAMESPACE)"

      # Get pod status
      kubectl get pods -n $NAMESPACE

      # Check pod readiness
      READY_PODS=$(kubectl get pods -n $NAMESPACE \
        -l app=reference-app \
        -o jsonpath='{.items[?(@.status.conditions[?(@.type=="Ready")].status=="True")].metadata.name}' | wc -w)

      echo "Ready pods: $READY_PODS"

      if [ $READY_PODS -eq 0 ]; then
        echo "ERROR: No ready pods found!"
        exit 1
      fi

      echo "Pod verification passed!"

  - name: verify-service
    image: $(params.KUBECTL_IMAGE)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Verifying service..."

      NAMESPACE="$(params.NAMESPACE)"
      SERVICE="reference-app"

      # Check service exists
      kubectl get svc $SERVICE -n $NAMESPACE

      # Check endpoints
      ENDPOINTS=$(kubectl get endpoints $SERVICE -n $NAMESPACE \
        -o jsonpath='{.subsets[*].addresses[*].ip}' | wc -w)

      echo "Service endpoints: $ENDPOINTS"

      if [ $ENDPOINTS -eq 0 ]; then
        echo "ERROR: No service endpoints found!"
        exit 1
      fi

      echo "Service verification passed!"

  - name: verify-health
    image: $(params.KUBECTL_IMAGE)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Verifying application health..."

      NAMESPACE="$(params.NAMESPACE)"
      POD=$(kubectl get pods -n $NAMESPACE \
        -l app=reference-app \
        -o jsonpath='{.items[0].metadata.name}')

      if [ -z "$POD" ]; then
        echo "ERROR: No pods found!"
        exit 1
      fi

      echo "Testing health endpoint on pod: $POD"

      # Test health endpoint
      kubectl exec $POD -n $NAMESPACE -- \
        curl -s http://localhost:8080/health/live

      echo ""
      echo "Health check passed!"
