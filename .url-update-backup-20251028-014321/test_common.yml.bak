---
# Test playbook for validated_patterns_common role
# Purpose: Validate common pattern deployment with multisource architecture

- name: Test validated_patterns_common Role
  hosts: localhost
  gather_facts: yes
  vars:
    test_timestamp: "{{ ansible_date_time.iso8601 }}"
    first_run_failed: false
    first_run_error: ""
    second_run_failed: false
    second_run_error: ""

  tasks:
    - name: Display test information
      debug:
        msg: |
          ========================================
          Testing: validated_patterns_common Role
          Timestamp: {{ test_timestamp }}
          ========================================

    # First Run
    - name: First run - Execute validated_patterns_common role
      block:
        - name: Run validated_patterns_common role (first time)
          include_role:
            name: validated_patterns_common
          register: first_run

        - name: Record first run success
          set_fact:
            first_run_failed: false

      rescue:
        - name: Record first run failure
          set_fact:
            first_run_failed: true
            first_run_error: "{{ ansible_failed_result.msg | default('Unknown error') }}"

        - name: Display first run error
          debug:
            msg: "First run failed: {{ first_run_error }}"

    # Second Run (Idempotency Test)
    - name: Second run - Execute validated_patterns_common role
      block:
        - name: Run validated_patterns_common role (second time)
          include_role:
            name: validated_patterns_common
          register: second_run

        - name: Record second run success
          set_fact:
            second_run_failed: false

      rescue:
        - name: Record second run failure
          set_fact:
            second_run_failed: true
            second_run_error: "{{ ansible_failed_result.msg | default('Unknown error') }}"

        - name: Display second run error
          debug:
            msg: "Second run failed: {{ second_run_error }}"

    # Verify Idempotency
    - name: Verify idempotency
      assert:
        that:
          - not first_run_failed
          - not second_run_failed
        success_msg: "✅ Role is idempotent"
        fail_msg: "❌ Role failed idempotency test"
      ignore_errors: yes

    # Additional Validation Tests
    - name: Verify rhvp.cluster_utils collection is installed
      ansible.builtin.command:
        cmd: ansible-galaxy collection list rhvp.cluster_utils
      register: collection_check
      changed_when: false
      failed_when: false

    - name: Display collection check result
      debug:
        msg: "{{ '✅' if collection_check.rc == 0 else '❌' }} rhvp.cluster_utils collection: {{ 'Installed' if collection_check.rc == 0 else 'Not found' }}"

    - name: Verify Helm repositories are configured
      ansible.builtin.command:
        cmd: helm repo list
      register: helm_repos
      changed_when: false
      failed_when: false

    - name: Check for validatedpatterns repo
      set_fact:
        vp_repo_found: "{{ 'validatedpatterns' in helm_repos.stdout }}"
        jetstack_repo_found: "{{ 'jetstack' in helm_repos.stdout }}"
        external_secrets_repo_found: "{{ 'external-secrets' in helm_repos.stdout }}"
      when: helm_repos.rc == 0

    - name: Display Helm repository status
      debug:
        msg: |
          Helm Repositories:
          {{ '✅' if vp_repo_found | default(false) else '❌' }} validatedpatterns
          {{ '✅' if jetstack_repo_found | default(false) else '❌' }} jetstack
          {{ '✅' if external_secrets_repo_found | default(false) else '❌' }} external-secrets

    - name: Verify openshift-gitops namespace exists
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: openshift-gitops
      register: gitops_namespace
      failed_when: false

    - name: Display namespace status
      debug:
        msg: "{{ '✅' if gitops_namespace.resources | length > 0 else '❌' }} openshift-gitops namespace: {{ 'Exists' if gitops_namespace.resources | length > 0 else 'Not found' }}"

    - name: Check for clustergroup Helm release
      ansible.builtin.command:
        cmd: helm list -n openshift-gitops
      register: helm_releases
      changed_when: false
      failed_when: false

    - name: Check if clustergroup is deployed
      set_fact:
        clustergroup_deployed: "{{ 'clustergroup' in helm_releases.stdout }}"
      when: helm_releases.rc == 0

    - name: Display clustergroup deployment status
      debug:
        msg: "{{ '✅' if clustergroup_deployed | default(false) else '❌' }} clustergroup-chart: {{ 'Deployed' if clustergroup_deployed | default(false) else 'Not deployed' }}"

    - name: Verify openshift-gitops ArgoCD instance exists
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1beta1
        kind: ArgoCD
        name: openshift-gitops
        namespace: openshift-gitops
      register: argocd_instance
      failed_when: false

    - name: Display ArgoCD instance status
      debug:
        msg: "{{ '✅' if argocd_instance.resources | length > 0 else '❌' }} openshift-gitops ArgoCD instance: {{ 'Deployed' if argocd_instance.resources | length > 0 else 'Not found' }}"

    - name: Verify common-hub ArgoCD Application exists
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: common-hub
        namespace: openshift-gitops
      register: hub_application
      failed_when: false

    - name: Display hub application status
      debug:
        msg: "{{ '✅' if hub_application.resources | length > 0 else '❌' }} common-hub ArgoCD Application: {{ 'Created' if hub_application.resources | length > 0 else 'Not found' }}"

    - name: Verify openshift-gitops pods are running
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: openshift-gitops
        label_selectors:
          - "app.kubernetes.io/part-of=argocd"
      register: argocd_pods
      failed_when: false

    - name: Display ArgoCD pod status
      debug:
        msg: |
          common-gitops pods: {{ argocd_pods.resources | length }}
          {% if argocd_pods.resources | length > 0 %}
          Running pods: {{ argocd_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length }}
          Pod names: {{ argocd_pods.resources | map(attribute='metadata.name') | list | join(', ') }}
          {% endif %}

    # Generate Test Report
    - name: Generate test report
      copy:
        dest: "tests/week8/results/common_test_report.md"
        content: |
          # Test Report: validated_patterns_common Role

          **Test Date:** {{ test_timestamp }}
          **Test Duration:** N/A

          ## Test Summary

          | Test | Status |
          |------|--------|
          | First Run | {{ 'PASSED' if not first_run_failed else 'FAILED' }} |
          | Second Run | {{ 'PASSED' if not second_run_failed else 'FAILED' }} |
          | Idempotency | {{ 'PASSED' if not first_run_failed and not second_run_failed else 'FAILED' }} |

          ## Test Details

          ### First Execution
          - **Status:** {{ 'PASSED' if not first_run_failed else 'FAILED' }}
          - **Time:** {{ test_timestamp }}
          {% if first_run_failed %}
          - **Error:** {{ first_run_error }}
          {% endif %}

          ### Second Execution (Idempotency Test)
          - **Status:** {{ 'PASSED' if not second_run_failed else 'FAILED' }}
          - **Time:** {{ test_timestamp }}
          {% if second_run_failed %}
          - **Error:** {{ second_run_error }}
          {% endif %}

          ## Validation Checks

          1. {{ '✅' if collection_check.rc == 0 else '❌' }} rhvp.cluster_utils collection installed
          2. {{ '✅' if vp_repo_found | default(false) else '❌' }} validatedpatterns Helm repository configured
          3. {{ '✅' if jetstack_repo_found | default(false) else '❌' }} jetstack Helm repository configured
          4. {{ '✅' if external_secrets_repo_found | default(false) else '❌' }} external-secrets Helm repository configured
          5. {{ '✅' if gitops_namespace.resources | length > 0 else '❌' }} openshift-gitops namespace exists
          6. {{ '✅' if clustergroup_deployed | default(false) else '❌' }} clustergroup-chart deployed
          7. {{ '✅' if argocd_instance.resources | length > 0 else '❌' }} common-gitops ArgoCD instance deployed
          7. {{ '✅' if argocd_instance.resources | length > 0 else '❌' }} openshift-gitops ArgoCD instance deployed
          8. {{ '✅' if hub_application.resources | length > 0 else '❌' }} common-hub ArgoCD Application created
          9. {{ '✅' if argocd_pods.resources | length > 0 else '❌' }} openshift-gitops pods running ({{ argocd_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length }}/{{ argocd_pods.resources | length }})

          ## Conclusion

          {% if not first_run_failed and not second_run_failed %}
          ✅ **All tests passed successfully!**

          The validated_patterns_common role:
          - Executes successfully on first run
          - Is idempotent (second run produces same result)
          - Properly deploys validatedpatterns/common
          - Configures multisource architecture
          - Deploys clustergroup-chart v0.9.*
          {% else %}
          ❌ **Tests failed!**

          Issues encountered:
          {% if first_run_failed %}
          - First run failed: {{ first_run_error }}
          {% endif %}
          {% if second_run_failed %}
          - Second run failed: {{ second_run_error }}
          {% endif %}
          {% endif %}

          ## Next Steps

          {% if not first_run_failed and not second_run_failed %}
          - Proceed to Task 3: Test validated_patterns_deploy role
          - Verify ArgoCD integration
          - Test application deployment
          {% else %}
          - Review and fix errors
          - Re-run tests
          - Update role implementation
          {% endif %}

    - name: Display test summary
      debug:
        msg: |
          ========================================
          TEST SUMMARY
          ========================================
          First Run: {{ 'PASSED' if not first_run_failed else 'FAILED' }}
          Second Run: {{ 'PASSED' if not second_run_failed else 'FAILED' }}
          Idempotency: {{ 'PASSED' if not first_run_failed and not second_run_failed else 'FAILED' }}

          Report saved to: tests/week8/results/common_test_report.md
          ========================================
