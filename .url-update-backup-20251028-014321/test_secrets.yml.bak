---
# Week 10 Task 3: Secrets Management Security Validation
# Tests secrets management and encryption for the Validated Patterns Toolkit

- name: Test Secrets Management Security
  hosts: localhost
  gather_facts: yes
  vars:
    secrets_namespace: "validated-patterns-secrets"
    test_namespace: "reference-app"
    test_secret_name: "test-secret-week10"
    test_results: []

  tasks:
    - name: Display test information
      debug:
        msg:
          - "=========================================="
          - "Week 10 - Secrets Management Validation"
          - "=========================================="
          - "Secrets Namespace: {{ secrets_namespace }}"
          - "Test Namespace: {{ test_namespace }}"
          - "Test Secret: {{ test_secret_name }}"
          - "=========================================="

    # Phase 1: Secrets Namespace Validation
    - name: Phase 1 - Secrets Namespace Validation
      block:
        - name: Check if secrets namespace exists
          kubernetes.core.k8s_info:
            kind: Namespace
            name: "{{ secrets_namespace }}"
          register: secrets_ns_info

        - name: Validate secrets namespace exists
          assert:
            that:
              - secrets_ns_info.resources | length > 0
            fail_msg: "Secrets namespace {{ secrets_namespace }} not found"
            success_msg: "Secrets namespace {{ secrets_namespace }} exists"

        - name: Check namespace labels
          set_fact:
            ns_labels: "{{ secrets_ns_info.resources[0].metadata.labels | default({}) }}"

        - name: Record namespace validation result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Secrets Namespace', 'status': 'PASSED', 'message': 'Dedicated secrets namespace exists'}] }}"

    # Phase 2: Secret Creation and Encryption
    - name: Phase 2 - Secret Creation and Encryption
      block:
        - name: Create test secret
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ test_secret_name }}"
                namespace: "{{ secrets_namespace }}"
                labels:
                  test: week10
                  managed-by: validated-patterns
              type: Opaque
              stringData:
                username: "testuser"
                password: "testpassword123"
                api-key: "test-api-key-12345"
          register: secret_creation

        - name: Verify secret was created
          kubernetes.core.k8s_info:
            kind: Secret
            name: "{{ test_secret_name }}"
            namespace: "{{ secrets_namespace }}"
          register: created_secret_info

        - name: Validate secret exists
          assert:
            that:
              - created_secret_info.resources | length > 0
            fail_msg: "Test secret was not created"
            success_msg: "Test secret created successfully"

        - name: Validate secret data is base64 encoded
          assert:
            that:
              - "'data' in created_secret_info.resources[0]"
              - created_secret_info.resources[0].data.username is defined
            fail_msg: "Secret data not properly encoded"
            success_msg: "Secret data is base64 encoded"

        - name: Record secret creation result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Secret Creation', 'status': 'PASSED', 'message': 'Secrets created and encrypted'}] }}"

    # Phase 3: Secret Access Control
    - name: Phase 3 - Secret Access Control
      block:
        - name: Check RBAC for secrets access
          kubernetes.core.k8s_info:
            kind: Role
            namespace: "{{ secrets_namespace }}"
          register: secrets_roles

        - name: Validate secrets RBAC exists
          assert:
            that:
              - secrets_roles.resources | length > 0
            fail_msg: "No RBAC roles found for secrets namespace"
            success_msg: "RBAC roles exist for secrets management"

        - name: Check for secrets-manager role
          set_fact:
            secrets_manager_role: "{{ secrets_roles.resources | selectattr('metadata.name', 'equalto', 'secrets-manager') | list | first | default(None) }}"

        - name: Validate secrets-manager role permissions
          debug:
            msg: "Secrets manager role rules: {{ secrets_manager_role.rules | default([]) }}"
          when: secrets_manager_role is not none

        - name: Test unauthorized access (should fail)
          command: >
            oc get secret {{ test_secret_name }}
            -n {{ secrets_namespace }}
            --as=system:serviceaccount:default:default
          register: unauthorized_access
          ignore_errors: yes
          failed_when: false

        - name: Validate unauthorized access is denied
          assert:
            that:
              - unauthorized_access.rc != 0
            fail_msg: "Unauthorized access to secrets was allowed"
            success_msg: "Unauthorized access to secrets correctly denied"

        - name: Record access control result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Secret Access Control', 'status': 'PASSED', 'message': 'RBAC properly restricts secret access'}] }}"

    # Phase 4: Sealed Secrets Detection
    - name: Phase 4 - Sealed Secrets Detection
      block:
        - name: Check for Sealed Secrets controller
          kubernetes.core.k8s_info:
            kind: Deployment
            name: sealed-secrets-controller
            namespace: kube-system
          register: sealed_secrets_controller
          ignore_errors: yes

        - name: Check for Sealed Secrets CRD
          kubernetes.core.k8s_info:
            kind: CustomResourceDefinition
            name: sealedsecrets.bitnami.com
          register: sealed_secrets_crd
          ignore_errors: yes

        - name: Report Sealed Secrets status
          debug:
            msg: >
              Sealed Secrets Status:
              Controller: {{ 'Installed' if sealed_secrets_controller.resources | length > 0 else 'Not Installed' }}
              CRD: {{ 'Present' if sealed_secrets_crd.resources | length > 0 else 'Not Present' }}

        - name: Record sealed secrets detection result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Sealed Secrets Detection', 'status': 'INFO', 'message': 'Sealed Secrets status checked (optional component)'}] }}"

    # Phase 5: Secret Rotation Testing
    - name: Phase 5 - Secret Rotation Testing
      block:
        - name: Update test secret (simulate rotation)
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ test_secret_name }}"
                namespace: "{{ secrets_namespace }}"
                labels:
                  test: week10
                  managed-by: validated-patterns
                  rotated: "true"
              type: Opaque
              stringData:
                username: "testuser"
                password: "newpassword456"
                api-key: "new-api-key-67890"
          register: secret_rotation

        - name: Verify secret was updated
          kubernetes.core.k8s_info:
            kind: Secret
            name: "{{ test_secret_name }}"
            namespace: "{{ secrets_namespace }}"
          register: rotated_secret_info

        - name: Validate secret rotation
          assert:
            that:
              - rotated_secret_info.resources[0].metadata.labels.rotated == "true"
            fail_msg: "Secret rotation failed"
            success_msg: "Secret successfully rotated"

        - name: Record secret rotation result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Secret Rotation', 'status': 'PASSED', 'message': 'Secrets can be rotated successfully'}] }}"

    # Phase 6: Secret Cleanup Validation
    - name: Phase 6 - Secret Cleanup Validation
      block:
        - name: Delete test secret
          kubernetes.core.k8s:
            state: absent
            kind: Secret
            name: "{{ test_secret_name }}"
            namespace: "{{ secrets_namespace }}"
          register: secret_deletion

        - name: Verify secret was deleted
          kubernetes.core.k8s_info:
            kind: Secret
            name: "{{ test_secret_name }}"
            namespace: "{{ secrets_namespace }}"
          register: deleted_secret_check

        - name: Validate secret deletion
          assert:
            that:
              - deleted_secret_check.resources | length == 0
            fail_msg: "Secret was not properly deleted"
            success_msg: "Secret successfully deleted"

        - name: Record cleanup result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Secret Cleanup', 'status': 'PASSED', 'message': 'Secrets can be safely deleted'}] }}"

    # Phase 7: Generate Test Report
    - name: Phase 7 - Generate Test Report
      block:
        - name: Create results directory
          file:
            path: "../results"
            state: directory
            mode: '0755'

        - name: Generate secrets test report
          copy:
            content: |
              # Secrets Management Security Validation Report

              **Test Date:** {{ ansible_date_time.iso8601 }}
              **Test Duration:** {{ ansible_play_duration | default('N/A') }}
              **Cluster:** {{ lookup('env', 'KUBECONFIG') | default('default') }}

              ## Test Summary

              | Test Phase | Status | Message |
              |------------|--------|---------|
              {% for result in test_results %}
              | {{ result.test }} | {{ result.status }} | {{ result.message }} |
              {% endfor %}

              ## Secrets Management Configuration

              ### Secrets Namespace
              - **Name:** {{ secrets_namespace }}
              - **Status:** {{ 'Exists' if secrets_ns_info.resources | length > 0 else 'Not Found' }}
              - **Labels:** {{ ns_labels | default({}) | to_nice_json }}

              ### RBAC Configuration
              - **Roles:** {{ secrets_roles.resources | length }} role(s) in secrets namespace
              {% if secrets_manager_role is defined and secrets_manager_role is not none %}
              - **Secrets Manager Role:** Present
              - **Permissions:** {{ secrets_manager_role.rules | length }} rule(s)
              {% endif %}

              ### Sealed Secrets
              - **Controller:** {{ 'Installed' if sealed_secrets_controller.resources | length > 0 else 'Not Installed' }}
              - **CRD:** {{ 'Present' if sealed_secrets_crd.resources | length > 0 else 'Not Present' }}
              - **Status:** Optional component for enhanced security

              ## Security Best Practices

              - ✅ Dedicated secrets namespace
              - ✅ Secrets base64 encoded by default
              - ✅ RBAC controls secret access
              - ✅ Unauthorized access denied
              - ✅ Secret rotation supported
              - ✅ Secret cleanup working
              - ℹ️  Sealed Secrets available for enhanced encryption

              ## Test Results

              ✅ **All secrets management tests passed!**

              The secrets management follows security best practices:
              - Dedicated namespace for secrets
              - RBAC-controlled access
              - Proper encryption (base64 + etcd encryption)
              - Secret rotation capability
              - Clean deletion process

              ## Recommendations

              1. ✅ Continue using dedicated secrets namespace
              2. ✅ Maintain RBAC controls for secret access
              3. 💡 Consider implementing Sealed Secrets for GitOps workflows
              4. 💡 Implement secret rotation policies
              5. 💡 Use external secret managers (Vault, AWS Secrets Manager) for production
              6. ✅ Never commit secrets to Git repositories

              ## Security Considerations

              ### Current Implementation
              - Secrets stored in etcd (encrypted at rest if enabled)
              - Base64 encoding (not encryption)
              - RBAC controls access
              - Namespace isolation

              ### Enhanced Security Options
              - **Sealed Secrets:** Encrypt secrets for GitOps
              - **External Secrets Operator:** Sync from external vaults
              - **HashiCorp Vault:** Enterprise secret management
              - **Cloud Provider Secrets:** AWS/Azure/GCP secret managers

              ## Next Steps

              1. Proceed to network policies validation
              2. Complete Week 10 security testing
              3. Document security best practices
            dest: "../results/secrets_test_report.md"

        - name: Display test summary
          debug:
            msg:
              - "=========================================="
              - "Secrets Management Validation Summary"
              - "=========================================="
              - "Total Tests: {{ test_results | length }}"
              - "Passed: {{ test_results | selectattr('status', 'equalto', 'PASSED') | list | length }}"
              - "Info: {{ test_results | selectattr('status', 'equalto', 'INFO') | list | length }}"
              - "=========================================="
              - "Report saved to: ../results/secrets_test_report.md"
              - "=========================================="
