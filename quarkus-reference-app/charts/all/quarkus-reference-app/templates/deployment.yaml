apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ include "quarkus-reference-app.namespace" . }}
  annotations:
    argocd.argoproj.io/sync-wave: {{ .Values.syncWaves.deployment | quote }}
  labels:
    {{- include "quarkus-reference-app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "quarkus-reference-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "quarkus-reference-app.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "quarkus-reference-app.serviceAccountName" . }}
      containers:
      - name: {{ .Values.name }}
        {{- if .Values.build.enabled }}
        # Use ImageStream when build is enabled
        image: "image-registry.openshift-image-registry.svc:5000/{{ include "quarkus-reference-app.namespace" . }}/{{ .Values.name }}:{{ .Values.build.outputTag | default "latest" }}"
        {{- else }}
        # Use external image when build is disabled
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.targetPort }}
          name: {{ .Values.service.name }}
          protocol: {{ .Values.service.protocol }}
        env:
        - name: QUARKUS_PROFILE
          value: {{ .Values.config.profile | quote }}
        - name: APP_CONFIG
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.name }}-config
              key: app.config
              optional: true
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        {{- if .Values.healthChecks.liveness.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.healthChecks.liveness.path }}
            port: {{ .Values.healthChecks.liveness.port }}
          initialDelaySeconds: {{ .Values.healthChecks.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthChecks.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.healthChecks.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.healthChecks.liveness.failureThreshold }}
        {{- end }}
        {{- if .Values.healthChecks.readiness.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.healthChecks.readiness.path }}
            port: {{ .Values.healthChecks.readiness.port }}
          initialDelaySeconds: {{ .Values.healthChecks.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthChecks.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.healthChecks.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.healthChecks.readiness.failureThreshold }}
        {{- end }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
