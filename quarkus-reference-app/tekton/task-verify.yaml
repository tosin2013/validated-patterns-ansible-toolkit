apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reference-app-verify
  namespace: reference-app
spec:
  description: Verify Quarkus reference application deployment

  params:
  - name: NAMESPACE
    type: string
    description: Kubernetes namespace
    default: reference-app
  - name: DEPLOYMENT
    type: string
    description: Deployment name
    default: reference-app
  - name: KUBECTL_IMAGE
    type: string
    description: kubectl container image
    default: bitnami/kubectl:latest

  steps:
  - name: check-deployment
    image: $(params.KUBECTL_IMAGE)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Checking deployment status..."

      NAMESPACE="$(params.NAMESPACE)"
      DEPLOYMENT="$(params.DEPLOYMENT)"

      # Get deployment status
      kubectl get deployment $DEPLOYMENT -n $NAMESPACE

      # Check replicas
      DESIRED=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE \
        -o jsonpath='{.spec.replicas}')
      READY=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE \
        -o jsonpath='{.status.readyReplicas}')

      echo "Desired replicas: $DESIRED"
      echo "Ready replicas: $READY"

      if [ "$DESIRED" != "$READY" ]; then
        echo "ERROR: Not all replicas are ready!"
        exit 1
      fi

      echo "Deployment check passed!"

  - name: test-api
    image: $(params.KUBECTL_IMAGE)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Testing API endpoints..."

      NAMESPACE="$(params.NAMESPACE)"
      POD=$(kubectl get pods -n $NAMESPACE \
        -l app=reference-app \
        -o jsonpath='{.items[0].metadata.name}')

      if [ -z "$POD" ]; then
        echo "ERROR: No pods found!"
        exit 1
      fi

      echo "Testing on pod: $POD"

      # Test health endpoints
      echo "Testing /health/live..."
      kubectl exec $POD -n $NAMESPACE -- \
        curl -s http://localhost:8080/health/live | grep -q "UP"

      echo "Testing /health/ready..."
      kubectl exec $POD -n $NAMESPACE -- \
        curl -s http://localhost:8080/health/ready | grep -q "UP"

      # Test API endpoint
      echo "Testing /api/example..."
      kubectl exec $POD -n $NAMESPACE -- \
        curl -s http://localhost:8080/api/example | grep -q "Example"

      echo "API tests passed!"

  - name: check-metrics
    image: $(params.KUBECTL_IMAGE)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Checking metrics endpoint..."

      NAMESPACE="$(params.NAMESPACE)"
      POD=$(kubectl get pods -n $NAMESPACE \
        -l app=reference-app \
        -o jsonpath='{.items[0].metadata.name}')

      # Test metrics endpoint
      echo "Testing /metrics..."
      kubectl exec $POD -n $NAMESPACE -- \
        curl -s http://localhost:8080/metrics | grep -q "jvm_memory"

      echo "Metrics check passed!"

  - name: check-logs
    image: $(params.KUBECTL_IMAGE)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo "Checking application logs..."

      NAMESPACE="$(params.NAMESPACE)"
      DEPLOYMENT="$(params.DEPLOYMENT)"

      # Get recent logs
      echo "Recent logs:"
      kubectl logs deployment/$DEPLOYMENT -n $NAMESPACE --tail=20

      # Check for errors
      if kubectl logs deployment/$DEPLOYMENT -n $NAMESPACE | grep -i "error"; then
        echo "WARNING: Errors found in logs"
      fi

      echo "Log check completed!"

  - name: summary
    image: $(params.KUBECTL_IMAGE)
    command:
    - /bin/bash
    - -c
    args:
    - |
      set -e

      echo ""
      echo "═══════════════════════════════════════════════════════════"
      echo "DEPLOYMENT VERIFICATION SUMMARY"
      echo "═══════════════════════════════════════════════════════════"

      NAMESPACE="$(params.NAMESPACE)"
      DEPLOYMENT="$(params.DEPLOYMENT)"

      echo ""
      echo "Deployment: $DEPLOYMENT"
      echo "Namespace: $NAMESPACE"
      echo ""

      # Show deployment status
      echo "Deployment Status:"
      kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o wide

      echo ""
      echo "Pod Status:"
      kubectl get pods -n $NAMESPACE -l app=reference-app -o wide

      echo ""
      echo "Service Status:"
      kubectl get svc -n $NAMESPACE -l app=reference-app -o wide

      echo ""
      echo "═══════════════════════════════════════════════════════════"
      echo "✅ DEPLOYMENT VERIFICATION PASSED"
      echo "═══════════════════════════════════════════════════════════"
