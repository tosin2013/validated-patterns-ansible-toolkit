# Secrets values template for Quarkus Reference Application
#
# IMPORTANT: This is a TEMPLATE file. DO NOT commit actual secrets to Git!
#
# Instructions:
# 1. Copy this file to values-secrets.yaml
# 2. Replace placeholder values with actual secrets
# 3. Ensure values-secrets.yaml is in .gitignore
# 4. Store actual secrets in a secure vault (e.g., HashiCorp Vault, Sealed Secrets)
#
# Usage:
#   cp values-secrets.yaml.template values-secrets.yaml
#   # Edit values-secrets.yaml with actual secrets
#   # Deploy with: helm install ... -f values-secrets.yaml

# Database credentials (if needed)
database:
  enabled: false
  host: "postgresql.example.com"
  port: 5432
  name: "quarkus_db"
  username: "REPLACE_WITH_ACTUAL_USERNAME"
  password: "REPLACE_WITH_ACTUAL_PASSWORD"
  # Connection string (alternative to individual fields)
  connectionString: "postgresql://REPLACE_WITH_ACTUAL_USERNAME:REPLACE_WITH_ACTUAL_PASSWORD@postgresql.example.com:5432/quarkus_db"

# API keys and tokens
apiKeys:
  # External service API keys
  externalService:
    apiKey: "REPLACE_WITH_ACTUAL_API_KEY"
    apiSecret: "REPLACE_WITH_ACTUAL_API_SECRET"

  # GitHub token for private repositories
  github:
    token: "REPLACE_WITH_ACTUAL_GITHUB_TOKEN"

  # Container registry credentials
  registry:
    username: "REPLACE_WITH_ACTUAL_USERNAME"
    password: "REPLACE_WITH_ACTUAL_PASSWORD"
    email: "REPLACE_WITH_ACTUAL_EMAIL"

# TLS certificates (if using custom certificates)
tls:
  enabled: false
  # Certificate in PEM format
  cert: |
    -----BEGIN CERTIFICATE-----
    REPLACE_WITH_ACTUAL_CERTIFICATE
    -----END CERTIFICATE-----
  # Private key in PEM format
  key: |
    -----BEGIN PRIVATE KEY-----
    REPLACE_WITH_ACTUAL_PRIVATE_KEY
    -----END PRIVATE KEY-----
  # CA certificate (if needed)
  ca: |
    -----BEGIN CERTIFICATE-----
    REPLACE_WITH_ACTUAL_CA_CERTIFICATE
    -----END CERTIFICATE-----

# OAuth/OIDC configuration (if needed)
oauth:
  enabled: false
  clientId: "REPLACE_WITH_ACTUAL_CLIENT_ID"
  clientSecret: "REPLACE_WITH_ACTUAL_CLIENT_SECRET"
  issuerUrl: "https://auth.example.com"
  redirectUrl: "https://reference-app.example.com/callback"

# SMTP configuration (if needed for email notifications)
smtp:
  enabled: false
  host: "smtp.example.com"
  port: 587
  username: "REPLACE_WITH_ACTUAL_USERNAME"
  password: "REPLACE_WITH_ACTUAL_PASSWORD"
  from: "noreply@example.com"
  tls: true

# S3/Object storage credentials (if needed)
objectStorage:
  enabled: false
  endpoint: "s3.amazonaws.com"
  region: "us-east-1"
  bucket: "quarkus-app-storage"
  accessKeyId: "REPLACE_WITH_ACTUAL_ACCESS_KEY_ID"
  secretAccessKey: "REPLACE_WITH_ACTUAL_SECRET_ACCESS_KEY"

# Redis credentials (if needed for caching)
redis:
  enabled: false
  host: "redis.example.com"
  port: 6379
  password: "REPLACE_WITH_ACTUAL_PASSWORD"
  database: 0

# Kafka credentials (if needed for messaging)
kafka:
  enabled: false
  bootstrapServers: "kafka.example.com:9092"
  username: "REPLACE_WITH_ACTUAL_USERNAME"
  password: "REPLACE_WITH_ACTUAL_PASSWORD"
  saslMechanism: "PLAIN"
  securityProtocol: "SASL_SSL"

# Custom application secrets
application:
  # JWT signing key
  jwtSecret: "REPLACE_WITH_ACTUAL_JWT_SECRET"

  # Encryption key
  encryptionKey: "REPLACE_WITH_ACTUAL_ENCRYPTION_KEY"

  # Custom environment variables with secrets
  env:
    SECRET_KEY_1: "REPLACE_WITH_ACTUAL_SECRET_1"
    SECRET_KEY_2: "REPLACE_WITH_ACTUAL_SECRET_2"

# Monitoring and observability secrets
monitoring:
  # Prometheus remote write credentials
  prometheus:
    username: "REPLACE_WITH_ACTUAL_USERNAME"
    password: "REPLACE_WITH_ACTUAL_PASSWORD"

  # Grafana admin credentials
  grafana:
    adminUser: "admin"
    adminPassword: "REPLACE_WITH_ACTUAL_PASSWORD"

# Backup credentials
backup:
  # S3 backup credentials
  s3:
    accessKeyId: "REPLACE_WITH_ACTUAL_ACCESS_KEY_ID"
    secretAccessKey: "REPLACE_WITH_ACTUAL_SECRET_ACCESS_KEY"

# Notes:
# - Never commit values-secrets.yaml to Git
# - Use Sealed Secrets or External Secrets Operator for GitOps workflows
# - Rotate secrets regularly
# - Use strong, randomly generated passwords
# - Consider using a secrets management solution like HashiCorp Vault
