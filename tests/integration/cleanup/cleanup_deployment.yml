---
# Cleanup playbook for Validated Patterns deployment
# Use this before running integration tests to ensure clean state

- name: Cleanup Validated Patterns deployment
  hosts: localhost
  connection: local
  gather_facts: yes

  vars:
    # Cleanup configuration
    cleanup_pattern_name: "validated-patterns-ansible-toolkit"
    cleanup_operator_namespace: "openshift-operators"
    cleanup_gitops_namespace: "openshift-gitops"
    cleanup_app_namespaces:
      - validated-patterns
      - quarkus-app-dev
      - quarkus-app-prod

    # Safety settings
    cleanup_confirm: true
    cleanup_wait_timeout: 300
    cleanup_force_delete: false

    # Debug mode
    cleanup_debug: true

  tasks:
    # ========================================
    # Pre-Cleanup Validation
    # ========================================

    - name: Display cleanup information
      debug:
        msg: |
          ========================================
          Validated Patterns Cleanup
          ========================================
          Pattern: {{ cleanup_pattern_name }}
          Operator Namespace: {{ cleanup_operator_namespace }}
          GitOps Namespace: {{ cleanup_gitops_namespace }}
          App Namespaces: {{ cleanup_app_namespaces | join(', ') }}
          ========================================
          ⚠️  WARNING: This will remove all pattern components
          ========================================

    - name: Confirm cleanup operation
      pause:
        prompt: |

          Are you sure you want to cleanup the deployment? (yes/no)
          This will remove:
          - Pattern Custom Resource
          - ArgoCD Applications
          - Application Namespaces
          - Validated Patterns Operator (optional)

          Type 'yes' to continue
      register: cleanup_confirmation
      when: cleanup_confirm | bool

    - name: Verify confirmation
      assert:
        that:
          - cleanup_confirmation.user_input | lower == 'yes'
        fail_msg: "Cleanup cancelled by user"
        success_msg: "Cleanup confirmed, proceeding..."
      when: cleanup_confirm | bool

    - name: Verify cluster connectivity
      kubernetes.core.k8s_cluster_info:
      register: cluster_info

    - name: Display cluster information
      debug:
        msg: |
          ✅ Connected to cluster
          Version: {{ cluster_info.version.server.kubernetes.gitVersion }}

    # ========================================
    # Step 1: Delete ArgoCD Applications
    # ========================================

    - name: Get all ArgoCD applications
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        namespace: "{{ cleanup_gitops_namespace }}"
      register: all_applications
      ignore_errors: yes

    - name: Display applications to be deleted
      debug:
        msg: |
          Found {{ all_applications.resources | length }} ArgoCD applications
          {% for app in all_applications.resources %}
          - {{ app.metadata.name }}
          {% endfor %}
      when: all_applications.resources is defined

    - name: Delete ArgoCD applications
      kubernetes.core.k8s:
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: "{{ item.metadata.name }}"
        namespace: "{{ cleanup_gitops_namespace }}"
        state: absent
        wait: yes
        wait_timeout: "{{ cleanup_wait_timeout }}"
      loop: "{{ all_applications.resources }}"
      when: all_applications.resources is defined
      ignore_errors: yes

    - name: Wait for applications to be deleted
      kubernetes.core.k8s_info:
        api_version: argoproj.io/v1alpha1
        kind: Application
        namespace: "{{ cleanup_gitops_namespace }}"
      register: remaining_apps
      until: remaining_apps.resources | length == 0
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: Display application cleanup status
      debug:
        msg: |
          {% if remaining_apps.resources | length == 0 %}
          ✅ All ArgoCD applications deleted
          {% else %}
          ⚠️  {{ remaining_apps.resources | length }} applications still exist
          {% endif %}

    # ========================================
    # Step 2: Delete Pattern Custom Resource
    # ========================================

    - name: Check if Pattern CR exists
      kubernetes.core.k8s_info:
        api_version: gitops.hybrid-cloud-patterns.io/v1alpha1
        kind: Pattern
        name: "{{ cleanup_pattern_name }}"
        namespace: "{{ cleanup_operator_namespace }}"
      register: pattern_cr_check
      ignore_errors: yes

    - name: Delete Pattern Custom Resource
      kubernetes.core.k8s:
        api_version: gitops.hybrid-cloud-patterns.io/v1alpha1
        kind: Pattern
        name: "{{ cleanup_pattern_name }}"
        namespace: "{{ cleanup_operator_namespace }}"
        state: absent
        wait: yes
        wait_timeout: "{{ cleanup_wait_timeout }}"
      when: pattern_cr_check.resources | length > 0
      ignore_errors: yes

    - name: Wait for Pattern CR to be deleted
      kubernetes.core.k8s_info:
        api_version: gitops.hybrid-cloud-patterns.io/v1alpha1
        kind: Pattern
        name: "{{ cleanup_pattern_name }}"
        namespace: "{{ cleanup_operator_namespace }}"
      register: pattern_cr_status
      until: pattern_cr_status.resources | length == 0
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: Display Pattern CR cleanup status
      debug:
        msg: |
          {% if pattern_cr_status.resources | length == 0 %}
          ✅ Pattern CR deleted
          {% else %}
          ⚠️  Pattern CR still exists
          {% endif %}

    # ========================================
    # Step 3: Delete Application Namespaces
    # ========================================

    - name: Check application namespaces
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ item }}"
      register: namespace_check
      loop: "{{ cleanup_app_namespaces }}"
      ignore_errors: yes

    - name: Delete application namespaces
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ item }}"
        state: absent
        wait: yes
        wait_timeout: "{{ cleanup_wait_timeout }}"
      loop: "{{ cleanup_app_namespaces }}"
      ignore_errors: yes

    - name: Wait for namespaces to be deleted
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ item }}"
      register: namespace_status
      until: namespace_status.resources | length == 0
      retries: 30
      delay: 10
      loop: "{{ cleanup_app_namespaces }}"
      ignore_errors: yes

    - name: Display namespace cleanup status
      debug:
        msg: "✅ Application namespaces cleanup initiated"

    # ========================================
    # Step 4: Optional - Delete GitOps Namespace
    # ========================================

    - name: Prompt for GitOps namespace deletion
      pause:
        prompt: |

          Do you want to delete the GitOps namespace ({{ cleanup_gitops_namespace }})?
          This will remove ArgoCD completely. (yes/no)
      register: gitops_deletion_confirm
      when: cleanup_confirm | bool

    - name: Delete GitOps namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ cleanup_gitops_namespace }}"
        state: absent
        wait: yes
        wait_timeout: "{{ cleanup_wait_timeout }}"
      when:
        - cleanup_confirm | bool
        - gitops_deletion_confirm.user_input | lower == 'yes'
      ignore_errors: yes

    # ========================================
    # Step 5: Optional - Uninstall VP Operator
    # ========================================

    - name: Prompt for VP Operator uninstallation
      pause:
        prompt: |

          Do you want to uninstall the Validated Patterns Operator?
          This will remove the operator completely. (yes/no)
      register: operator_deletion_confirm
      when: cleanup_confirm | bool

    - name: Get VP Operator Subscription
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        name: patterns-operator
        namespace: "{{ cleanup_operator_namespace }}"
      register: operator_subscription
      when:
        - cleanup_confirm | bool
        - operator_deletion_confirm.user_input | lower == 'yes'
      ignore_errors: yes

    - name: Delete VP Operator Subscription
      kubernetes.core.k8s:
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        name: patterns-operator
        namespace: "{{ cleanup_operator_namespace }}"
        state: absent
      when:
        - cleanup_confirm | bool
        - operator_deletion_confirm.user_input | lower == 'yes'
        - operator_subscription.resources | length > 0
      ignore_errors: yes

    - name: Get VP Operator CSV
      kubernetes.core.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        namespace: "{{ cleanup_operator_namespace }}"
      register: operator_csv
      when:
        - cleanup_confirm | bool
        - operator_deletion_confirm.user_input | lower == 'yes'
      ignore_errors: yes

    - name: Delete VP Operator CSV
      kubernetes.core.k8s:
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        name: "{{ item.metadata.name }}"
        namespace: "{{ cleanup_operator_namespace }}"
        state: absent
      loop: "{{ operator_csv.resources | selectattr('metadata.name', 'search', 'patterns-operator') | list }}"
      when:
        - cleanup_confirm | bool
        - operator_deletion_confirm.user_input | lower == 'yes'
        - operator_csv.resources is defined
      ignore_errors: yes

    # ========================================
    # Cleanup Summary
    # ========================================

    - name: Display cleanup summary
      debug:
        msg: |
          ========================================
          Cleanup Summary
          ========================================
          ✅ ArgoCD applications deleted
          ✅ Pattern CR deleted
          ✅ Application namespaces deleted
          {% if gitops_deletion_confirm is defined and gitops_deletion_confirm.user_input | lower == 'yes' %}
          ✅ GitOps namespace deleted
          {% else %}
          ℹ️  GitOps namespace retained
          {% endif %}
          {% if operator_deletion_confirm is defined and operator_deletion_confirm.user_input | lower == 'yes' %}
          ✅ VP Operator uninstalled
          {% else %}
          ℹ️  VP Operator retained
          {% endif %}
          ========================================

          Cluster is now ready for fresh deployment!
          ========================================
