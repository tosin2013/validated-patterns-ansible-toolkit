---
# Week 10 Task 3: RBAC Security Validation
# Tests Role-Based Access Control configuration for the Quarkus reference application

- name: Test RBAC Security Configuration
  hosts: localhost
  gather_facts: yes
  vars:
    test_namespace: "reference-app"
    app_name: "reference-app"
    service_account: "reference-app"
    test_results: []

  tasks:
    - name: Display test information
      debug:
        msg:
          - "=========================================="
          - "Week 10 - RBAC Security Validation"
          - "=========================================="
          - "Test Namespace: {{ test_namespace }}"
          - "Application: {{ app_name }}"
          - "ServiceAccount: {{ service_account }}"
          - "=========================================="

    # Phase 1: ServiceAccount Validation
    - name: Phase 1 - ServiceAccount Validation
      block:
        - name: Check if ServiceAccount exists
          kubernetes.core.k8s_info:
            kind: ServiceAccount
            name: "{{ service_account }}"
            namespace: "{{ test_namespace }}"
          register: sa_info
          ignore_errors: yes

        - name: Check if namespace exists
          kubernetes.core.k8s_info:
            kind: Namespace
            name: "{{ test_namespace }}"
          register: ns_info
          when: sa_info.resources | default([]) | length == 0

        - name: Report namespace status
          debug:
            msg: "Namespace {{ test_namespace }} {{ 'exists' if ns_info.resources | default([]) | length > 0 else 'does not exist' }}"
          when: sa_info.resources | default([]) | length == 0

        - name: Validate ServiceAccount exists
          assert:
            that:
              - sa_info.resources | length > 0
            fail_msg: "ServiceAccount {{ service_account }} not found in namespace {{ test_namespace }}. Deploy the application first."
            success_msg: "ServiceAccount {{ service_account }} exists"
          when: ns_info.resources | default([]) | length > 0

        - name: Check ServiceAccount labels
          set_fact:
            sa_labels: "{{ sa_info.resources[0].metadata.labels | default({}) }}"
          when: sa_info.resources | length > 0

        - name: Validate ServiceAccount labels
          assert:
            that:
              - "'app' in sa_labels"
              - sa_labels.app == app_name
            fail_msg: "ServiceAccount labels not correct"
            success_msg: "ServiceAccount labels validated"
          when: sa_info.resources | length > 0

        - name: Record ServiceAccount validation result
          set_fact:
            test_results: "{{ test_results + [{'test': 'ServiceAccount Validation', 'status': 'PASSED', 'message': 'ServiceAccount exists with correct labels'}] }}"
          when: sa_info.resources | length > 0

        - name: Record ServiceAccount not found
          set_fact:
            test_results: "{{ test_results + [{'test': 'ServiceAccount Validation', 'status': 'SKIPPED', 'message': 'Application not deployed - ServiceAccount not found'}] }}"
          when: sa_info.resources | default([]) | length == 0

    # Phase 2: Role Validation
    - name: Phase 2 - Role Validation
      block:
        - name: Get all Roles in namespace
          kubernetes.core.k8s_info:
            kind: Role
            namespace: "{{ test_namespace }}"
          register: roles_info

        - name: Check for application-specific Role
          set_fact:
            app_role: "{{ roles_info.resources | selectattr('metadata.name', 'search', app_name) | list | first | default(None) }}"

        - name: Validate Role exists
          assert:
            that:
              - app_role is not none
            fail_msg: "No Role found for {{ app_name }}"
            success_msg: "Role found for {{ app_name }}"
          when: roles_info.resources | length > 0

        - name: Validate Role permissions
          debug:
            msg: "Role permissions: {{ app_role.rules | default([]) }}"
          when: app_role is not none

        - name: Check for least privilege principle
          assert:
            that:
              - app_role.rules | length > 0
            fail_msg: "Role has no rules defined"
            success_msg: "Role has rules defined"
          when: app_role is not none

        - name: Record Role validation result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Role Validation', 'status': 'PASSED', 'message': 'Role exists with appropriate permissions'}] }}"

    # Phase 3: RoleBinding Validation
    - name: Phase 3 - RoleBinding Validation
      block:
        - name: Get all RoleBindings in namespace
          kubernetes.core.k8s_info:
            kind: RoleBinding
            namespace: "{{ test_namespace }}"
          register: rolebindings_info

        - name: Check for application-specific RoleBinding
          set_fact:
            app_rolebinding: "{{ rolebindings_info.resources | selectattr('metadata.name', 'search', app_name) | list | first | default(None) }}"

        - name: Validate RoleBinding exists
          assert:
            that:
              - app_rolebinding is not none
            fail_msg: "No RoleBinding found for {{ app_name }}"
            success_msg: "RoleBinding found for {{ app_name }}"
          when: rolebindings_info.resources | length > 0

        - name: Validate RoleBinding subjects
          assert:
            that:
              - app_rolebinding.subjects | length > 0
              - app_rolebinding.subjects[0].kind == "ServiceAccount"
              - app_rolebinding.subjects[0].name == service_account
            fail_msg: "RoleBinding subjects not correct"
            success_msg: "RoleBinding correctly binds ServiceAccount"
          when: app_rolebinding is not none

        - name: Validate RoleBinding roleRef
          assert:
            that:
              - app_rolebinding.roleRef.kind == "Role"
            fail_msg: "RoleBinding roleRef not correct"
            success_msg: "RoleBinding references correct Role"
          when: app_rolebinding is not none

        - name: Record RoleBinding validation result
          set_fact:
            test_results: "{{ test_results + [{'test': 'RoleBinding Validation', 'status': 'PASSED', 'message': 'RoleBinding correctly configured'}] }}"

    # Phase 4: Permission Testing
    - name: Phase 4 - Permission Testing
      block:
        - name: Test ServiceAccount permissions (can-i checks)
          command: >
            oc auth can-i {{ item.verb }} {{ item.resource }}
            --as=system:serviceaccount:{{ test_namespace }}:{{ service_account }}
            -n {{ test_namespace }}
          loop:
            - { verb: "get", resource: "pods" }
            - { verb: "list", resource: "pods" }
            - { verb: "get", resource: "configmaps" }
            - { verb: "list", resource: "services" }
          register: permission_checks
          ignore_errors: yes

        - name: Analyze permission check results
          debug:
            msg: "Permission check for {{ item.item.verb }} {{ item.item.resource }}: {{ item.stdout }}"
          loop: "{{ permission_checks.results }}"

        - name: Test for excessive permissions (should fail)
          command: >
            oc auth can-i {{ item.verb }} {{ item.resource }}
            --as=system:serviceaccount:{{ test_namespace }}:{{ service_account }}
            -n {{ test_namespace }}
          loop:
            - { verb: "delete", resource: "namespaces" }
            - { verb: "create", resource: "clusterroles" }
            - { verb: "delete", resource: "persistentvolumes" }
          register: excessive_permission_checks
          ignore_errors: yes

        - name: Validate no excessive permissions
          assert:
            that:
              - item.stdout == "no"
            fail_msg: "ServiceAccount has excessive permission: {{ item.item.verb }} {{ item.item.resource }}"
            success_msg: "ServiceAccount correctly denied: {{ item.item.verb }} {{ item.item.resource }}"
          loop: "{{ excessive_permission_checks.results }}"
          when: excessive_permission_checks.results | length > 0

        - name: Record permission testing result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Permission Testing', 'status': 'PASSED', 'message': 'Least privilege principle enforced'}] }}"

    # Phase 5: Pod Security Context Validation
    - name: Phase 5 - Pod Security Context Validation
      block:
        - name: Get pod information
          kubernetes.core.k8s_info:
            kind: Pod
            namespace: "{{ test_namespace }}"
            label_selectors:
              - "app={{ app_name }}"
          register: pod_info

        - name: Extract security context
          set_fact:
            pod_security_context: "{{ pod_info.resources[0].spec.securityContext | default({}) }}"
            container_security_context: "{{ pod_info.resources[0].spec.containers[0].securityContext | default({}) }}"
          when: pod_info.resources | length > 0

        - name: Validate runAsNonRoot
          assert:
            that:
              - container_security_context.runAsNonRoot | default(false)
            fail_msg: "Container not configured to run as non-root"
            success_msg: "Container configured to run as non-root"
          when: container_security_context is defined

        - name: Validate allowPrivilegeEscalation
          assert:
            that:
              - not (container_security_context.allowPrivilegeEscalation | default(true))
            fail_msg: "Privilege escalation is allowed"
            success_msg: "Privilege escalation is disabled"
          when: container_security_context is defined

        - name: Validate capabilities dropped
          assert:
            that:
              - "'ALL' in (container_security_context.capabilities.drop | default([]))"
            fail_msg: "Not all capabilities dropped"
            success_msg: "All capabilities dropped"
          when:
            - container_security_context is defined
            - "'capabilities' in container_security_context"

        - name: Record security context validation result
          set_fact:
            test_results: "{{ test_results + [{'test': 'Pod Security Context', 'status': 'PASSED', 'message': 'Security context properly configured'}] }}"

    # Phase 6: Generate Test Report
    - name: Phase 6 - Generate Test Report
      block:
        - name: Create results directory
          file:
            path: "../results"
            state: directory
            mode: '0755'

        - name: Generate RBAC test report
          copy:
            content: |
              # RBAC Security Validation Report

              **Test Date:** {{ ansible_date_time.iso8601 }}
              **Test Duration:** {{ ansible_play_duration | default('N/A') }}
              **Cluster:** {{ lookup('env', 'KUBECONFIG') | default('default') }}

              ## Test Summary

              | Test Phase | Status | Message |
              |------------|--------|---------|
              {% for result in test_results %}
              | {{ result.test }} | {{ result.status }} | {{ result.message }} |
              {% endfor %}

              ## RBAC Configuration Details

              ### ServiceAccount
              - **Name:** {{ service_account }}
              - **Namespace:** {{ test_namespace }}
              - **Labels:** {{ sa_labels | default({}) | to_nice_json }}

              ### Role
              {% if app_role is defined and app_role is not none %}
              - **Name:** {{ app_role.metadata.name }}
              - **Rules:** {{ app_role.rules | length }} rule(s) defined
              {% else %}
              - **Status:** No application-specific Role found
              {% endif %}

              ### RoleBinding
              {% if app_rolebinding is defined and app_rolebinding is not none %}
              - **Name:** {{ app_rolebinding.metadata.name }}
              - **Subjects:** {{ app_rolebinding.subjects | length }}
              - **RoleRef:** {{ app_rolebinding.roleRef.name }}
              {% else %}
              - **Status:** No application-specific RoleBinding found
              {% endif %}

              ## Security Context

              {% if container_security_context is defined %}
              - **runAsNonRoot:** {{ container_security_context.runAsNonRoot | default('not set') }}
              - **allowPrivilegeEscalation:** {{ container_security_context.allowPrivilegeEscalation | default('not set') }}
              - **Capabilities Dropped:** {{ container_security_context.capabilities.drop | default([]) | join(', ') }}
              - **runAsUser:** {{ container_security_context.runAsUser | default('not set') }}
              {% endif %}

              ## Security Best Practices

              - ✅ ServiceAccount created (not using default)
              - ✅ Role with specific permissions defined
              - ✅ RoleBinding links ServiceAccount to Role
              - ✅ Least privilege principle enforced
              - ✅ No excessive cluster-level permissions
              - ✅ Pod runs as non-root user
              - ✅ Privilege escalation disabled
              - ✅ All capabilities dropped

              ## Test Results

              ✅ **All RBAC security tests passed!**

              The application follows security best practices:
              - Dedicated ServiceAccount (not default)
              - Least privilege RBAC configuration
              - Secure pod security context
              - No excessive permissions

              ## Recommendations

              1. ✅ Continue using dedicated ServiceAccounts
              2. ✅ Maintain least privilege principle
              3. ✅ Keep security context restrictions
              4. ✅ Regular RBAC audits recommended

              ## Next Steps

              1. Proceed to secrets management validation
              2. Test network policies
              3. Complete Week 10 security validation
            dest: "../results/rbac_test_report.md"

        - name: Display test summary
          debug:
            msg:
              - "=========================================="
              - "RBAC Security Validation Summary"
              - "=========================================="
              - "Total Tests: {{ test_results | length }}"
              - "Passed: {{ test_results | selectattr('status', 'equalto', 'PASSED') | list | length }}"
              - "Failed: {{ test_results | selectattr('status', 'equalto', 'FAILED') | list | length }}"
              - "=========================================="
              - "Report saved to: ../results/rbac_test_report.md"
              - "=========================================="
