---
# Test playbook for validated_patterns_operator role
# Week 9 Task 2: VP Operator Role Testing

- name: Test validated_patterns_operator role
  hosts: localhost
  connection: local
  gather_facts: yes

  vars:
    # Test configuration
    test_namespace: "validated-patterns-test"
    test_pattern_name: "validated-patterns-ansible-toolkit"
    test_git_url: "https://github.com/tosin2013/validated-patterns-ansible-toolkit.git"
    test_git_revision: "main"

    # Role variables
    validated_patterns_pattern_name: "{{ test_pattern_name }}"
    validated_patterns_git_url: "{{ test_git_url }}"
    validated_patterns_git_revision: "{{ test_git_revision }}"
    validated_patterns_target_namespace: "openshift-gitops"
    validated_patterns_values_global: "values-global.yaml"
    validated_patterns_values_hub: "values-hub.yaml"

    # Test tracking
    test_results: []
    first_run_status: "NOT_RUN"
    second_run_status: "NOT_RUN"

    # Debug mode
    vp_debug_mode: true

  tasks:
    # ========================================
    # Pre-Test Validation
    # ========================================

    - name: Display test information
      debug:
        msg: |
          ========================================
          Week 9 Task 2: VP Operator Role Testing
          ========================================
          Pattern: {{ test_pattern_name }}
          Git URL: {{ test_git_url }}
          Revision: {{ test_git_revision }}
          Target Namespace: {{ validated_patterns_target_namespace }}
          ========================================

    - name: Verify cluster connectivity
      kubernetes.core.k8s_cluster_info:
      register: cluster_info
      failed_when: cluster_info.failed | default(false)

    - name: Display cluster information
      debug:
        msg: |
          ✅ Cluster connectivity verified
          Version: {{ cluster_info.version.server.kubernetes.gitVersion }}
          Platform: {{ cluster_info.version.server.platform | default('Unknown') }}

    - name: Check if values files exist
      stat:
        path: "{{ item }}"
      register: values_files_check
      loop:
        - "{{ validated_patterns_values_global }}"
        - "{{ validated_patterns_values_hub }}"
      failed_when: not values_files_check.results | map(attribute='stat.exists') | list | all

    - name: Record pre-test validation
      set_fact:
        test_results: "{{ test_results + ['✅ Pre-test validation: PASSED'] }}"

    # ========================================
    # Test 1: First Run (Operator Installation)
    # ========================================

    - name: Test 1 - First run of validated_patterns_operator role
      block:
        - name: Execute validated_patterns_operator role (First run)
          include_role:
            name: validated_patterns_operator
          register: first_run

        - name: Record first run success
          set_fact:
            first_run_status: "PASSED"
            test_results: "{{ test_results + ['✅ Test 1 (First run): PASSED'] }}"

      rescue:
        - name: Record first run failure
          set_fact:
            first_run_status: "FAILED"
            test_results: "{{ test_results + ['❌ Test 1 (First run): FAILED - ' + ansible_failed_result.msg | default('Unknown error')] }}"

        - name: Display first run error
          debug:
            msg: "First run failed: {{ ansible_failed_result }}"

    # ========================================
    # Test 2: Operator Validation
    # ========================================

    - name: Test 2 - Validate VP Operator installation
      block:
        - name: Check VP Operator CSV
          kubernetes.core.k8s_info:
            api_version: operators.coreos.com/v1alpha1
            kind: ClusterServiceVersion
            namespace: openshift-operators
          register: operator_csv

        - name: Verify operator is installed
          assert:
            that:
              - operator_csv.resources | length > 0
              - operator_csv.resources | selectattr('metadata.name', 'search', 'patterns-operator') | list | length > 0
            fail_msg: "VP Operator not found"
            success_msg: "✅ VP Operator installed"

        - name: Get operator status
          set_fact:
            operator_phase: "{{ (operator_csv.resources | selectattr('metadata.name', 'search', 'patterns-operator') | list | first).status.phase }}"

        - name: Verify operator is ready
          assert:
            that:
              - operator_phase == "Succeeded"
            fail_msg: "Operator phase is {{ operator_phase }}, expected Succeeded"
            success_msg: "✅ Operator phase: Succeeded"

        - name: Record operator validation success
          set_fact:
            test_results: "{{ test_results + ['✅ Test 2 (Operator validation): PASSED'] }}"

      rescue:
        - name: Record operator validation failure
          set_fact:
            test_results: "{{ test_results + ['❌ Test 2 (Operator validation): FAILED'] }}"

    # ========================================
    # Test 3: Pattern CR Validation
    # ========================================

    - name: Test 3 - Validate Pattern CR
      block:
        - name: Check Pattern CR
          kubernetes.core.k8s_info:
            api_version: gitops.hybrid-cloud-patterns.io/v1alpha1
            kind: Pattern
            name: "{{ test_pattern_name }}"
            namespace: openshift-operators
          register: pattern_cr

        - name: Verify Pattern CR exists
          assert:
            that:
              - pattern_cr.resources | length > 0
            fail_msg: "Pattern CR not found"
            success_msg: "✅ Pattern CR exists"

        - name: Display Pattern CR status
          debug:
            msg: |
              Pattern CR Status:
              Name: {{ pattern_cr.resources[0].metadata.name }}
              Phase: {{ pattern_cr.resources[0].status.phase | default('Unknown') }}
              Git URL: {{ pattern_cr.resources[0].spec.gitSpec.targetRepo }}
              Revision: {{ pattern_cr.resources[0].spec.gitSpec.targetRevision }}

        - name: Record Pattern CR validation success
          set_fact:
            test_results: "{{ test_results + ['✅ Test 3 (Pattern CR validation): PASSED'] }}"

      rescue:
        - name: Record Pattern CR validation failure
          set_fact:
            test_results: "{{ test_results + ['❌ Test 3 (Pattern CR validation): FAILED'] }}"

    # ========================================
    # Test 4: GitOps Deployment Validation
    # ========================================

    - name: Test 4 - Validate GitOps deployment
      block:
        - name: Check openshift-gitops namespace
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Namespace
            name: "{{ validated_patterns_target_namespace }}"
          register: gitops_namespace

        - name: Verify GitOps namespace exists
          assert:
            that:
              - gitops_namespace.resources | length > 0
            fail_msg: "GitOps namespace not found"
            success_msg: "✅ GitOps namespace exists"

        - name: Check ArgoCD instance
          kubernetes.core.k8s_info:
            api_version: argoproj.io/v1beta1
            kind: ArgoCD
            name: openshift-gitops
            namespace: "{{ validated_patterns_target_namespace }}"
          register: argocd_instance

        - name: Verify ArgoCD instance exists
          assert:
            that:
              - argocd_instance.resources | length > 0
            fail_msg: "ArgoCD instance not found"
            success_msg: "✅ ArgoCD instance exists"

        - name: Display ArgoCD status
          debug:
            msg: |
              ArgoCD Instance:
              Name: {{ argocd_instance.resources[0].metadata.name }}
              Phase: {{ argocd_instance.resources[0].status.phase | default('Unknown') }}

        - name: Check ArgoCD server pod
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Pod
            namespace: "{{ validated_patterns_target_namespace }}"
            label_selectors:
              - "app.kubernetes.io/name=openshift-gitops-server"
          register: argocd_pods

        - name: Verify ArgoCD server is running
          assert:
            that:
              - argocd_pods.resources | length > 0
              - argocd_pods.resources[0].status.phase == "Running"
            fail_msg: "ArgoCD server not running"
            success_msg: "✅ ArgoCD server running"

        - name: Record GitOps validation success
          set_fact:
            test_results: "{{ test_results + ['✅ Test 4 (GitOps deployment): PASSED'] }}"

      rescue:
        - name: Record GitOps validation failure
          set_fact:
            test_results: "{{ test_results + ['❌ Test 4 (GitOps deployment): FAILED'] }}"

    # ========================================
    # Test 5: Clustergroup Application Validation
    # ========================================

    - name: Test 5 - Validate clustergroup application
      block:
        - name: Check clustergroup application
          kubernetes.core.k8s_info:
            api_version: argoproj.io/v1alpha1
            kind: Application
            name: "{{ test_pattern_name }}-clustergroup"
            namespace: "{{ validated_patterns_target_namespace }}"
          register: clustergroup_app
          ignore_errors: yes

        - name: Display clustergroup status
          debug:
            msg: |
              {% if clustergroup_app.resources | length > 0 %}
              Clustergroup Application:
              Name: {{ clustergroup_app.resources[0].metadata.name }}
              Health: {{ clustergroup_app.resources[0].status.health.status | default('Unknown') }}
              Sync: {{ clustergroup_app.resources[0].status.sync.status | default('Unknown') }}
              {% else %}
              Clustergroup application not yet created (this may be normal)
              {% endif %}

        - name: Record clustergroup validation
          set_fact:
            test_results: "{{ test_results + ['✅ Test 5 (Clustergroup app): ' + ('PASSED' if clustergroup_app.resources | length > 0 else 'PENDING')] }}"

      rescue:
        - name: Record clustergroup validation failure
          set_fact:
            test_results: "{{ test_results + ['⏳ Test 5 (Clustergroup app): PENDING'] }}"

    # ========================================
    # Test 6: Idempotency Test (Second Run)
    # ========================================

    - name: Test 6 - Idempotency test (Second run)
      block:
        - name: Execute validated_patterns_operator role (Second run)
          include_role:
            name: validated_patterns_operator
          register: second_run

        - name: Record second run success
          set_fact:
            second_run_status: "PASSED"
            test_results: "{{ test_results + ['✅ Test 6 (Idempotency): PASSED'] }}"

      rescue:
        - name: Record second run failure
          set_fact:
            second_run_status: "FAILED"
            test_results: "{{ test_results + ['❌ Test 6 (Idempotency): FAILED - ' + ansible_failed_result.msg | default('Unknown error')] }}"

    # ========================================
    # Test 7: ArgoCD Applications Check
    # ========================================

    - name: Test 7 - Check ArgoCD applications
      block:
        - name: Get all ArgoCD applications
          kubernetes.core.k8s_info:
            api_version: argoproj.io/v1alpha1
            kind: Application
            namespace: "{{ validated_patterns_target_namespace }}"
          register: all_applications

        - name: Display applications summary
          debug:
            msg: |
              ArgoCD Applications: {{ all_applications.resources | length }}
              {% for app in all_applications.resources %}
              - {{ app.metadata.name }}: {{ app.status.health.status | default('Unknown') }} / {{ app.status.sync.status | default('Unknown') }}
              {% endfor %}

        - name: Record applications check
          set_fact:
            test_results: "{{ test_results + ['✅ Test 7 (Applications check): PASSED - ' + (all_applications.resources | length | string) + ' applications found'] }}"

      rescue:
        - name: Record applications check failure
          set_fact:
            test_results: "{{ test_results + ['❌ Test 7 (Applications check): FAILED'] }}"

    # ========================================
    # Test 8: ArgoCD Access Information
    # ========================================

    - name: Test 8 - Verify ArgoCD access information
      block:
        - name: Get ArgoCD route
          kubernetes.core.k8s_info:
            api_version: route.openshift.io/v1
            kind: Route
            name: openshift-gitops-server
            namespace: "{{ validated_patterns_target_namespace }}"
          register: argocd_route

        - name: Verify route exists
          assert:
            that:
              - argocd_route.resources | length > 0
            fail_msg: "ArgoCD route not found"
            success_msg: "✅ ArgoCD route exists"

        - name: Get ArgoCD admin secret
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            name: openshift-gitops-cluster
            namespace: "{{ validated_patterns_target_namespace }}"
          register: argocd_secret

        - name: Verify secret exists
          assert:
            that:
              - argocd_secret.resources | length > 0
            fail_msg: "ArgoCD admin secret not found"
            success_msg: "✅ ArgoCD admin secret exists"

        - name: Display ArgoCD access information
          debug:
            msg: |
              ========================================
              ArgoCD Access Information
              ========================================
              URL: https://{{ argocd_route.resources[0].spec.host }}
              Username: admin
              Password: (stored in secret openshift-gitops-cluster)
              ========================================

        - name: Record access information check
          set_fact:
            test_results: "{{ test_results + ['✅ Test 8 (ArgoCD access): PASSED'] }}"

      rescue:
        - name: Record access information check failure
          set_fact:
            test_results: "{{ test_results + ['❌ Test 8 (ArgoCD access): FAILED'] }}"

    # ========================================
    # Generate Test Report
    # ========================================

    - name: Generate test report
      block:
        - name: Get cluster version
          kubernetes.core.k8s_cluster_info:
          register: final_cluster_info

        - name: Get operator final status
          kubernetes.core.k8s_info:
            api_version: operators.coreos.com/v1alpha1
            kind: ClusterServiceVersion
            namespace: openshift-operators
          register: final_operator_status

        - name: Get Pattern CR final status
          kubernetes.core.k8s_info:
            api_version: gitops.hybrid-cloud-patterns.io/v1alpha1
            kind: Pattern
            name: "{{ test_pattern_name }}"
            namespace: openshift-operators
          register: final_pattern_status
          ignore_errors: yes

        - name: Get ArgoCD final status
          kubernetes.core.k8s_info:
            api_version: argoproj.io/v1beta1
            kind: ArgoCD
            name: openshift-gitops
            namespace: "{{ validated_patterns_target_namespace }}"
          register: final_argocd_status
          ignore_errors: yes

        - name: Create test report
          copy:
            content: |
              # Week 9 Task 2: VP Operator Role Test Report

              **Test Date:** {{ ansible_date_time.iso8601 }}
              **Pattern:** {{ test_pattern_name }}
              **Git URL:** {{ test_git_url }}
              **Revision:** {{ test_git_revision }}

              ---

              ## Test Environment

              **Cluster Information:**
              - Kubernetes Version: {{ final_cluster_info.version.server.kubernetes.gitVersion }}
              - Platform: {{ final_cluster_info.version.server.platform | default('Unknown') }}

              ---

              ## Test Results Summary

              {% for result in test_results %}
              {{ result }}
              {% endfor %}

              **First Run:** {{ first_run_status }}
              **Second Run (Idempotency):** {{ second_run_status }}

              ---

              ## Component Status

              ### Validated Patterns Operator
              {% if final_operator_status.resources | selectattr('metadata.name', 'search', 'patterns-operator') | list | length > 0 %}
              - **Status:** Installed
              - **CSV:** {{ (final_operator_status.resources | selectattr('metadata.name', 'search', 'patterns-operator') | list | first).metadata.name }}
              - **Phase:** {{ (final_operator_status.resources | selectattr('metadata.name', 'search', 'patterns-operator') | list | first).status.phase }}
              {% else %}
              - **Status:** Not Found
              {% endif %}

              ### Pattern Custom Resource
              {% if final_pattern_status.resources | length > 0 %}
              - **Name:** {{ final_pattern_status.resources[0].metadata.name }}
              - **Phase:** {{ final_pattern_status.resources[0].status.phase | default('Unknown') }}
              - **Git URL:** {{ final_pattern_status.resources[0].spec.gitSpec.targetRepo }}
              - **Revision:** {{ final_pattern_status.resources[0].spec.gitSpec.targetRevision }}
              {% else %}
              - **Status:** Not Found
              {% endif %}

              ### OpenShift GitOps (ArgoCD)
              {% if final_argocd_status.resources | length > 0 %}
              - **Instance:** {{ final_argocd_status.resources[0].metadata.name }}
              - **Namespace:** {{ final_argocd_status.resources[0].metadata.namespace }}
              - **Phase:** {{ final_argocd_status.resources[0].status.phase | default('Unknown') }}
              {% else %}
              - **Status:** Not Found
              {% endif %}

              ### ArgoCD Applications
              {% if all_applications is defined %}
              - **Total Applications:** {{ all_applications.resources | length }}
              {% for app in all_applications.resources %}
              - **{{ app.metadata.name }}:** {{ app.status.health.status | default('Unknown') }} / {{ app.status.sync.status | default('Unknown') }}
              {% endfor %}
              {% endif %}

              ---

              ## Conclusion

              {% if first_run_status == "PASSED" and second_run_status == "PASSED" %}
              ✅ **All tests PASSED**

              The validated_patterns_operator role successfully:
              1. Installed the Validated Patterns Operator
              2. Created the Pattern Custom Resource
              3. Deployed OpenShift GitOps (ArgoCD)
              4. Validated all components
              5. Demonstrated idempotency

              The role is **production-ready** for end-user deployment.
              {% else %}
              ⚠️ **Some tests FAILED or PENDING**

              Review the test results above for details.
              {% endif %}

              ---

              ## Next Steps

              1. Review ArgoCD UI for application deployment status
              2. Monitor clustergroup application sync
              3. Verify all pattern components are healthy
              4. Proceed with Week 9 Task 3 (End-to-end integration testing)
            dest: "tests/week9/results/operator_test_report.md"

        - name: Display test report location
          debug:
            msg: "✅ Test report generated: tests/week9/results/operator_test_report.md"

    # ========================================
    # Final Summary
    # ========================================

    - name: Display final test summary
      debug:
        msg: |
          ========================================
          Week 9 Task 2: Test Summary
          ========================================
          {% for result in test_results %}
          {{ result }}
          {% endfor %}

          First Run: {{ first_run_status }}
          Second Run (Idempotency): {{ second_run_status }}

          Test Report: tests/week9/results/operator_test_report.md
          ========================================
